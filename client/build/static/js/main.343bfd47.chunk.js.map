{"version":3,"sources":["actions/alertActions.js","actions/types.js","utils/setAuthToken.js","actions/authActions.js","components/Layout/AlertDiv/index.js","components/Auth/LoginForm/index.js","components/Auth/RegistrationForm/index.js","components/Layout/FormContainer/index.js","components/Layout/WelcomeShowcase/index.js","pages/Welcome.js","components/Layout/PageTitle/index.js","actions/albumActions.js","components/Album/AlbumList/index.js","components/Buttons/SubmitBtn/index.js","components/Album/AddAlbumForm/index.js","components/Album/AddAlbumModal/index.js","components/Buttons/ModalButton/index.js","pages/Dashboard.js","components/Settings/ChangePasswordForm/index.js","components/Settings/DeleteUser/index.js","components/Settings/AlbumPassword/index.js","components/Settings/AlbumSettings/index.js","pages/AccountSettings.js","actions/pictureActions.js","components/Picture/AddPictureForm/index.js","components/Picture/AddPictureModal/index.js","actions/promptActions.js","components/Prompt/AddPromptForm/index.js","components/Prompt/AddPromptModal/index.js","components/Picture/MixedPostPicture/index.js","components/Prompt/MixedPostPrompt/index.js","components/Picture/CarouselPicture/index.js","components/Prompt/CarouselPrompt/index.js","pages/Album.js","components/Layout/AppNavbar/index.js","components/Auth/PrivateRoute/index.js","pages/PageNotFound.js","components/Layout/Wrapper/index.js","reducers/authReducer.js","reducers/alertReducer.js","reducers/albumReducer.js","reducers/pictureReducer.js","reducers/promptReducer.js","reducers/index.js","store.js","App.js","index.js","img/logo.png"],"names":["setAlert","msg","alertType","dispatch","id","uuid","type","payload","setTimeout","setAuthToken","token","axios","defaults","headers","common","loadUser","a","localStorage","get","res","data","connect","state","alerts","alert","length","map","key","Alert","color","className","isAuth","auth","isAuthenticated","login","email","password","config","body","JSON","stringify","post","errors","response","forEach","error","props","useState","formData","setFormData","onChange","event","target","name","value","onSubmit","preventDefault","err","console","to","Form","closeBtn","FormGroup","htmlFor","Button","register","firstName","lastName","password2","Row","Col","md","FormContainer","formType","WelcomeShowcase","src","alt","isLoading","formDivIndex","setFormDivIndex","setFormType","formDivOpen","getAttribute","formDivs","style","div","display","transitions","useTransition","p","from","opacity","transform","overflowx","enter","leave","icon","size","onClick","Container","item","FormDiv","PageTitle","children","getAllAlbums","status","text","getAlbum","album_id","posts","pictures","picture","push","prompts","prompt","sort","b","dateUploaded","i","log","albums","album","useEffect","albumLength","albumLoading","class","_id","title","format","date","SubmitButton","marginBottom","addNewAlbum","passwordRequired","toggle","setPasswordRequired","form","check","Label","Input","isChecked","AddAlbumModal","Modal","isOpen","ModalHeader","close","ModalBody","ModalButton","action","AddAlbumForm","propTypes","PropTypes","bool","isRequired","object","fluid","oneOfType","string","addIcon","modal","setModal","user","padding","changePw","oldPassword","newPassword","newPassword2","put","deleteAccount","window","confirm","delete","albumPasswordChange","setNewPassword","onPasswordSubmit","defaultChecked","FormText","deleteAlbum","albumNameChange","newTitle","deleteClick","activeTab","setActiveTab","tab","deleteId","passwordId","setNewTitle","onAlbumTitleChange","submitAlbumTitle","Card","CardTitle","xs","Nav","vertical","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","tabs","getPictures","addNewPicture","mode","caption","setCaption","uploadedBy","setUploadedBy","dateRecorded","setDateRecorded","image","setImage","pathArray","location","pathname","split","albumId","FormData","append","encType","files","AddPictureModal","getPrompts","addNewPrompt","AddPromptModal","MixedPostPicture","data-id","CardImg","CardBody","MixedPostPrompt","CardText","CarouselPicture","CardSubtitle","CarouselPrompt","deletePicture","picture_id","deletePrompt","prompt_id","albumAuth","promptModal","setPromptModal","photoModal","setPhotoModal","carouselModal","setCarouselModal","photoToggle","promptToggle","carouselToggle","activeIndex","setActiveIndex","currentPost","setCurrentPost","next","nextIndex","previous","setPassword","validAlbum","authorized","index","centered","Carousel","CarouselItem","ModalFooter","CarouselControl","direction","directionText","onClickHandler","logout","loggedInLinks","href","loading","Navbar","NavbarBrand","logo","Component","component","rest","render","Wrapper","initialState","getItem","combineReducers","filter","setItem","removeItem","middleware","thunk","composeEnhancers","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","compose","store","createStore","rootReducer","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","App","Helmet","exact","path","Welcome","Dashboard","AccountSettings","Album","PageNotFound","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.343bfd47.chunk.js","sourcesContent":["import { SET_ALERT, REMOVE_ALERT } from './types';\nimport { v4 as uuid } from 'uuid';\n\nexport const setAlert = (msg, alertType) => (dispatch) => {\n     const id = uuid();\n     dispatch({\n          type: SET_ALERT,\n          payload: { msg, alertType, id },\n     });\n\n     setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), 4000);\n};\n","export const USER_LOADING = 'USER_LOADING';\nexport const USER_LOADED = 'USER_LOADED';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\nexport const DELETE_USER_FAIL = 'DELETE_USER_FAIL';\nexport const CHANGE_PW_SUCCESS = 'CHANGE_PW_SUCCESS';\nexport const CHANGE_PW_FAIL = 'CHANGE_PW_FAIL';\n\nexport const SET_ALERT = 'SET_ALERT';\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\n\nexport const GET_ALBUMS_SUCCESS = 'GET_ALBUMS_SUCCESS';\nexport const GET_ALBUMS_FAIL = 'GET_ALBUMS_FAIL';\nexport const GET_ALBUM_SUCCESS = 'GET_ALBUM_SUCCESS';\nexport const GET_ALBUM_FAIL = 'GET_ALBUM_FAIL';\nexport const ALBUM_AUTH_SUCCESS = 'ALBUM_AUTH_SUCCESS';\nexport const ALBUM_AUTH_FAIL = 'ALBUM_AUTH_FAIL';\nexport const ADD_ALBUM_SUCCESS = 'ADD_ALBUM_SUCCESS';\nexport const ADD_ALBUM_FAIL = 'ADD_ALBUM_FAIL';\nexport const DELETE_ALBUM_SUCCESS = 'DELETE_ALBUM_SUCCESS';\nexport const DELETE_ALBUM_FAIL = 'DELETE_ALBUM_FAIL';\nexport const CHANGE_ALBUM_NAME_SUCCESS = 'CHANGE_ALBUM_NAME_SUCCESS';\nexport const CHANGE_ALBUM_NAME_FAIL = 'CHANGE_ALBUM_NAME_FAIL';\nexport const CHANGE_ALBUM_PW_SUCCESS = 'CHANGE_ALBUM_PW_SUCCESS';\nexport const CHANGE_ALBUM_PW_FAIL = 'CHANGE_ALBUM_PW_FAIL';\n\nexport const GET_PICTURES_SUCCESS = 'GET_PICTURES_SUCCESS';\nexport const GET_PICTURES_FAIL = 'GET_PICTURES_FAIL';\nexport const VIEW_PICTURE_SUCCESS = 'VIEW_PICTURE_SUCCESS';\nexport const VIEW_PICTURE_FAIL = 'VIEW_PICTURE_FAIL';\nexport const ADD_PICTURE_SUCCESS = 'ADD_PICTURE_SUCCESS';\nexport const ADD_PICTURE_FAIL = 'ADD_PICTURE_FAIL';\nexport const DELETE_PICTURE_SUCCESS = 'DELETE_PICTURE_SUCCESS';\nexport const DELETE_PICTURE_FAIL = 'DELETE_PICTURE_FAIL';\n\nexport const GET_PROMPTS_SUCCESS = 'GET_PROMPTS_SUCCESS';\nexport const GET_PROMPTS_FAIL = 'GET_PROMPTS_FAIL';\nexport const VIEW_PROMPT_SUCCESS = 'VIEW_PROMPT_SUCCESS';\nexport const VIEW_PROMPT_FAIL = 'VIEW_PROMPT_FAIL';\nexport const ADD_PROMPT_SUCCESS = 'ADD_PROMPT_SUCCESS';\nexport const ADD_PROMPT_FAIL = 'ADD_PROMPT_FAIL';\nexport const DELETE_PROMPT_SUCCESS = 'DELETE_PROMPT_SUCCESS';\nexport const DELETE_PROMPT_FAIL = 'DELETE_PROMPT_FAIL';\n","import axios from 'axios';\n\n// adding a global header\nconst setAuthToken = (token) => {\n     if (token) {\n          axios.defaults.headers.common['x-auth-token'] = token;\n     } else {\n          delete axios.defaults.headers.common['x-auth-token'];\n     }\n};\n\nexport default setAuthToken;\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport setAuthToken from '../utils/setAuthToken';\n\nimport {\n     REGISTER_SUCCESS,\n     REGISTER_FAIL,\n     AUTH_ERROR,\n     USER_LOADED,\n     LOGIN_SUCCESS,\n     LOGIN_FAIL,\n     LOGOUT_SUCCESS,\n     CHANGE_PW_SUCCESS,\n     CHANGE_PW_FAIL,\n     DELETE_USER_SUCCESS,\n     DELETE_USER_FAIL,\n} from './types';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n     if (localStorage.token) {\n          setAuthToken(localStorage.token);\n     }\n     try {\n          const res = await axios.get('/api/auth');\n          dispatch({\n               type: USER_LOADED,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: AUTH_ERROR,\n          });\n     }\n};\n\n// Register user\nexport const register = ({ firstName, lastName, email, password }) => async (\n     dispatch\n) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ firstName, lastName, email, password });\n     try {\n          const res = await axios.post('api/users', body, config);\n          dispatch({\n               type: REGISTER_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(loadUser());\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n          dispatch({\n               type: REGISTER_FAIL,\n          });\n     }\n};\n\n// Login User\nexport const login = ({ email, password }) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ email, password });\n     try {\n          const res = await axios.post('/api/auth', body, config);\n          dispatch({\n               type: LOGIN_SUCCESS,\n               payload: res.data,\n          });\n\n          dispatch(loadUser());\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n          dispatch({\n               type: LOGIN_FAIL,\n          });\n     }\n};\n\nexport const logout = () => (dispatch) => {\n     dispatch({\n          type: LOGOUT_SUCCESS,\n     });\n};\n\nexport const changePw = ({ oldPassword, newPassword, newPassword2 }) => async (\n     dispatch\n) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ oldPassword, newPassword, newPassword2 });\n     try {\n          const res = await axios.put('/api/auth/password', body, config);\n          dispatch({\n               type: CHANGE_PW_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(setAlert('Password has been successfully changed'));\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n          dispatch({\n               type: CHANGE_PW_FAIL,\n          });\n     }\n};\n\nexport const deleteAccount = () => async (dispatch) => {\n     if (\n          window.confirm(\n               'Are you sure you want to delete your account? This action cannot be undone and all albums and their contents will be permanently deleted'\n          )\n     ) {\n          try {\n               await axios.delete('/api/auth');\n               dispatch({\n                    type: DELETE_USER_SUCCESS,\n               });\n               dispatch(setAlert('Your account has been permanently deleted'));\n          } catch (err) {\n               const errors = err.response.data;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_USER_FAIL,\n               });\n          }\n     }\n};\n","import React from 'react';\nimport { Alert } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst AlertDiv = ({ alerts }) =>\n     alerts !== null &&\n     alerts.length > 0 &&\n     alerts.map((alert) => (\n          <div key={alert.key}>\n               <Alert color={alert.alertType} className='alert'>\n                    {alert.msg}\n               </Alert>\n          </div>\n     ));\n\nAlertDiv.propTypes = {\n     alerts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     alerts: state.alert,\n});\n\nexport default connect(mapStateToProps)(AlertDiv);\n","import React, { useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\n\nimport { login } from '../../../actions/authActions';\nimport AlertDiv from '../../Layout/AlertDiv';\n\nconst LoginForm = (props) => {\n     const [formData, setFormData] = useState({\n          email: '',\n          password: '',\n     });\n\n     const { email, password } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          try {\n               props.login({ email, password });\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     // Redirect if logged in\n     if (props.isAuth) {\n          return <Redirect to='/dashboard' />;\n     }\n     return (\n          <Fragment>\n               <Form\n                    id='loginForm'\n                    className='form'\n                    onSubmit={(event) => onSubmit(event)}\n               >\n                    <h1>Welcome back</h1>\n                    {props.closeBtn}\n                    <FormGroup>\n                         <label htmlFor='emailInput'>Email</label>\n                         <input\n                              type='text'\n                              name='email'\n                              className='form-control'\n                              id='emailInput'\n                              onChange={(event) => onChange(event)}\n                              value={email}\n                              // required\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='passwordInput'>Password</label>\n                         <input\n                              type='password'\n                              name='password'\n                              className='form-control'\n                              id='passwordInput'\n                              onChange={(event) => onChange(event)}\n                              value={password}\n                              // required\n                         />\n                    </FormGroup>\n                    <Button\n                         type='submit'\n                         value='login'\n                         className='btn login-btn'\n                    >\n                         Login\n                    </Button>\n               </Form>\n               <AlertDiv />\n          </Fragment>\n     );\n};\n\n// login is a prop\nLoginForm.propTypes = {\n     login: PropTypes.func.isRequired,\n     isAuth: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { login })(LoginForm);\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setAlert } from '../../../actions/alertActions';\nimport { register } from '../../../actions/authActions';\nimport { Button, Form, FormGroup, Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport './style.css';\nimport AlertDiv from '../../Layout/AlertDiv';\n\nconst RegistrationForm = (props) => {\n     const [formData, setFormData] = useState({\n          firstName: '',\n          lastName: '',\n          email: '',\n          password: '',\n          password2: '',\n     });\n\n     const { firstName, lastName, email, password, password2 } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          if (password !== password2) {\n               props.setAlert('Passwords do not match', 'danger');\n          } else if (\n               firstName === '' ||\n               lastName === '' ||\n               email === '' ||\n               password === '' ||\n               password2 === ''\n          ) {\n               props.setAlert('Please fill in all fields', 'danger');\n          } else {\n               try {\n                    props.register({ firstName, lastName, email, password });\n               } catch (err) {\n                    console.error(err.response.data);\n               }\n          }\n     };\n\n     if (props.isAuth) {\n          return <Redirect to='/dashboard' />;\n     }\n\n     return (\n          <Fragment>\n               <Form\n                    className='form'\n                    id='registrationForm'\n                    onSubmit={(event) => onSubmit(event)}\n               >\n                    <h1>Welcome</h1>\n                    {props.closeBtn}\n                    <Row>\n                         <Col md={6}>\n                              <FormGroup>\n                                   <label htmlFor='fNameInput'>\n                                        First Name\n                                   </label>\n                                   <input\n                                        type='text'\n                                        name='firstName'\n                                        className='form-control'\n                                        id='firstNameInput'\n                                        onChange={(event) => onChange(event)}\n                                        value={firstName}\n                                        // required\n                                   />\n                              </FormGroup>\n                         </Col>\n                         <Col md={6}>\n                              <FormGroup>\n                                   <label htmlFor='lNameInput'>Last Name</label>\n                                   <input\n                                        type='text'\n                                        name='lastName'\n                                        className='form-control'\n                                        id='lastNameInput'\n                                        onChange={(event) => onChange(event)}\n                                        value={lastName}\n                                        // required\n                                   />\n                              </FormGroup>\n                         </Col>\n                    </Row>\n                    <Row>\n                         <Col md={12}>\n                              <FormGroup>\n                                   <label htmlFor='emailInput'>Email</label>\n                                   <input\n                                        type='text'\n                                        name='email'\n                                        className='form-control'\n                                        id='emailInput'\n                                        onChange={(event) => onChange(event)}\n                                        value={email}\n                                        // required\n                                   />\n                              </FormGroup>\n                         </Col>\n                    </Row>\n                    <Row>\n                         <Col md={6}>\n                              <FormGroup>\n                                   <label htmlFor='newPasswordInput'>\n                                        Password\n                                   </label>\n                                   <input\n                                        type='password'\n                                        name='password'\n                                        className='form-control'\n                                        id='newPasswordInput'\n                                        onChange={(event) => onChange(event)}\n                                        value={password}\n                                        // minLength='6'\n                                        // required\n                                   />\n                              </FormGroup>\n                         </Col>\n                         <Col md={6}>\n                              <FormGroup>\n                                   <label htmlFor='newPasswordInput'>\n                                        Confirm Password\n                                   </label>\n                                   <input\n                                        type='password'\n                                        name='password2'\n                                        className='form-control'\n                                        id='newPasswordInput2'\n                                        onChange={(event) => onChange(event)}\n                                        value={password2}\n                                        // minLength='6'\n                                        // required\n                                   />\n                              </FormGroup>\n                         </Col>\n                    </Row>\n                    <Button\n                         type='submit'\n                         value='register'\n                         className='btn'\n                         id='register-btn'\n                    >\n                         Register\n                    </Button>\n               </Form>\n               <AlertDiv />\n          </Fragment>\n     );\n};\n\nRegistrationForm.propTypes = {\n     setAlert: PropTypes.func.isRequired,\n     register: PropTypes.func.isRequired,\n     isAuth: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\n// have to export connect and pass in any actions\n// this allows us to access props.setAlert\nexport default connect(mapStateToProps, { setAlert, register })(\n     RegistrationForm\n);\n","import React, { Fragment } from 'react';\nimport LoginForm from '../../Auth/LoginForm';\nimport RegistrationForm from '../../Auth/RegistrationForm';\nimport './style.css';\n\nconst FormContainer = (props) => {\n     return (\n          <div>\n               {props.formType === 'login' ? (\n                    <Fragment>\n                         <div id='logInTriangle'>\n                              <LoginForm closeBtn={props.closeBtn} />\n                         </div>\n                    </Fragment>\n               ) : (\n                    <Fragment>\n                         <div id='registerTriangle'>\n                              <RegistrationForm closeBtn={props.closeBtn} />\n                         </div>\n                    </Fragment>\n               )}\n          </div>\n     );\n};\n\nexport default FormContainer;\n","import React from 'react';\nimport { Row } from 'reactstrap';\n\nfunction WelcomeShowcase() {\n     return (\n          <div id='showcase'>\n               <div className='movingArea'>\n                    {/* First set */}\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1593046584198-ed785e8bf3a6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Saying goodbye to Emilio\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1513492702219-923ec8c62a2f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Your first steps</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>My day</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1592106680408-e7e63efbc7ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Disney 2016</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/flagged/photo-1576066196482-347ca427d0f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1593630459615-6ab2aa81a6ce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Road trip songs</div>\n                         <div className='box prompt'>Your first solid food</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1507946116609-bfed19728fdf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>\n                              What we almost named you\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1536825919521-ab78da56193b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              What we can't stop listening to\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1551197600-d3782114566e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1513862448120-a41616062133?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Moments that made me cry\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1588410670460-cdab54625253?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Indy's first walk</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Your favorite food</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1547226846-000337daf073?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>What I'm learning</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1575404078738-d2f15b89d320?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Bringing Heddy home</div>\n                         <div className='box prompt'>Your first words</div>\n\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1458546450666-ebb1e605853f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>The proposal</div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1529424601215-d2a3daf193ff?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Our first dance</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1587327650077-76b67918ddeb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Your birth - grandma's perspective\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Foods of today</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1453745541039-d804ab0ff1ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Your favorite toy</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1512746804203-e53e69406f93?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Our first date</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1562832823-f277927d6f2c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1557469778-0b3269a1cc7a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Your first day of school\n                         </div>\n                    </Row>\n\n                    {/* STOOOOOP */}\n\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1593046584198-ed785e8bf3a6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Saying goodbye to Emilio\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1513492702219-923ec8c62a2f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Your first steps</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>My day</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1592106680408-e7e63efbc7ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Disney 2016</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/flagged/photo-1576066196482-347ca427d0f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1593630459615-6ab2aa81a6ce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Road trip songs</div>\n                         <div className='box prompt'>Your first solid food</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1507946116609-bfed19728fdf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>\n                              What we almost named you\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1536825919521-ab78da56193b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              What we can't stop listening to\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1551197600-d3782114566e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1513862448120-a41616062133?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Moments that made me cry\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1588410670460-cdab54625253?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Indie's first walk</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Your favorite food</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1547226846-000337daf073?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>What I'm learning</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1575404078738-d2f15b89d320?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Bringing Heddy home</div>\n                         <div className='box prompt'>Your first words</div>\n\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1458546450666-ebb1e605853f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>The proposal</div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1529424601215-d2a3daf193ff?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Our first dance</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1587327650077-76b67918ddeb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Your birth - grandma's perspective\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Foods of today</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1453745541039-d804ab0ff1ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>Your favorite toy</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1512746804203-e53e69406f93?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Our first date</div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1562832823-f277927d6f2c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box image'>\n                              <img\n                                   src='https://images.unsplash.com/photo-1557469778-0b3269a1cc7a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60'\n                                   alt='scrolling example'\n                              />\n                         </div>\n                         <div className='box prompt'>\n                              Your first day of school\n                         </div>\n                    </Row>\n               </div>\n          </div>\n     );\n}\n\nexport default WelcomeShowcase;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Container } from 'reactstrap';\nimport { useTransition, animated } from 'react-spring';\nimport MaterialIcon from 'material-icons-react';\n\nimport FormContainer from '../components/Layout/FormContainer';\nimport WelcomeShowcase from '../components/Layout/WelcomeShowcase';\n\nconst Welcome = ({ isAuth, isLoading }) => {\n     const [formDivIndex, setFormDivIndex] = useState(0);\n     const [formType, setFormType] = useState('');\n\n     const formDivClose = (event) => {\n          setFormDivIndex(0);\n     };\n\n     const formDivOpen = (event) => {\n          setFormDivIndex(1);\n          setFormType(event.target.getAttribute('type'));\n     };\n\n     const formDivs = [\n          ({ style }) => (\n               <animated.div style={{ ...style, display: 'none' }}>\n                    <div>You should never see this</div>\n               </animated.div>\n          ),\n          ({ style }) => (\n               <animated.div\n                    style={{ ...style, display: 'flex' }}\n                    id='formContainer'\n               >\n                    <FormContainer\n                         formType={formType}\n                         closeBtn={closeBtn}\n                    ></FormContainer>\n               </animated.div>\n          ),\n     ];\n\n     const transitions = useTransition(formDivIndex, (p) => p, {\n          from: {\n               opacity: 0,\n               transform: 'translate3d(10vw,0vw,0)',\n               overflowx: 'hidden',\n          },\n          enter: {\n               opacity: 1,\n               transform: 'translate3d(0%,0vw,0)',\n          },\n          leave: {\n               opacity: 0,\n               transform: 'translate3d(10vw,0vw,0)',\n               overflowx: 'hidden',\n          },\n     });\n\n     const closeBtn = (\n          <MaterialIcon\n               icon='arrow_forward'\n               color='white'\n               size='large'\n               id='authArrowCloseBtn'\n               onClick={formDivClose}\n          />\n     );\n\n     return isLoading || !isAuth ? (\n          <Container id='welcomePage'>\n               <div className='left'></div>\n               <div className='leftTriangle'></div>\n               <div id='mainText'>\n                    <h1>Memories worth sharing</h1>\n                    <h1>Privacy worth keeping</h1>\n               </div>\n               <div id='aboutText'>\n                    Post photos and write your own memories,\n                    <br />\n                    easily collaborate with friends and family,\n                    <br />\n                    and protect your albums with a password\n                    <br />\n               </div>\n               <div id='signInSquare'>\n                    <p id='signInText'>\n                         New user?{' '}\n                         <span\n                              onClick={formDivOpen}\n                              type='register'\n                              className='authLink'\n                         >\n                              Register\n                         </span>{' '}\n                         <br />\n                         Returning user?{' '}\n                         <span\n                              onClick={formDivOpen}\n                              type='login'\n                              className='authLink'\n                         >\n                              Login\n                         </span>\n                    </p>\n               </div>\n               <div id='signInTriangle'></div>\n               {transitions.map(({ item, props, key }) => {\n                    const FormDiv = formDivs[item];\n                    return <FormDiv key={key} style={props} />;\n               })}\n               <WelcomeShowcase />\n          </Container>\n     ) : (\n          <Redirect to='/dashboard' />\n     );\n};\n\nWelcome.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     isLoading: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     isLoading: state.auth.isLoading,\n});\n\nexport default connect(mapStateToProps)(Welcome);\n","import React from 'react';\nimport './style.css';\n\nconst PageTitle = (props) => {\n     return <h1 className='pageTitle'>{props.children}</h1>;\n};\n\nexport default PageTitle;\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport {\n     ADD_ALBUM_SUCCESS,\n     ADD_ALBUM_FAIL,\n     GET_ALBUMS_SUCCESS,\n     GET_ALBUMS_FAIL,\n     GET_ALBUM_SUCCESS,\n     GET_ALBUM_FAIL,\n     DELETE_ALBUM_SUCCESS,\n     DELETE_ALBUM_FAIL,\n     ALBUM_AUTH_SUCCESS,\n     ALBUM_AUTH_FAIL,\n     CHANGE_ALBUM_NAME_SUCCESS,\n     CHANGE_ALBUM_NAME_FAIL,\n     CHANGE_ALBUM_PW_SUCCESS,\n     CHANGE_ALBUM_PW_FAIL,\n} from './types';\n\nexport const getAllAlbums = () => async (dispatch) => {\n     try {\n          // knows which album to load from the token sent that contains the user id\n          const res = await axios.get('api/albums/');\n          dispatch({\n               type: GET_ALBUMS_SUCCESS,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: GET_ALBUMS_FAIL,\n               payload: {\n                    msg: err.response.status.text,\n                    status: err.response.status,\n               },\n          });\n     }\n};\n\nexport const addNewAlbum = ({ title, passwordRequired, password }) => async (\n     dispatch\n) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     if (!passwordRequired) {\n          password = '';\n     }\n     const body = JSON.stringify({ title, passwordRequired, password });\n     try {\n          const res = await axios.post('/api/albums/', body, config);\n          dispatch({\n               type: ADD_ALBUM_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAllAlbums());\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: ADD_ALBUM_FAIL,\n          });\n     }\n};\n\nexport const getAlbum = (album_id) => async (dispatch) => {\n     try {\n          const res = await axios.get(`/api/albums/${album_id}`);\n          let posts = [];\n          res.data[0].pictures.map((picture) => posts.push(picture));\n          res.data[0].prompts.map((prompt) => posts.push(prompt));\n          posts.sort((a, b) => (a.dateUploaded < b.dateUploaded ? 1 : -1));\n          dispatch({\n               type: GET_ALBUM_SUCCESS,\n               payload: { posts: posts, data: res.data },\n          });\n     } catch (err) {\n          const errors = err.response.data;\n          if (errors.length > 0) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n                    console.log(errors[i].msg);\n               }\n          }\n          dispatch({\n               type: GET_ALBUM_FAIL,\n          });\n     }\n};\n\nexport const albumAuth = ({ albumId, password }) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ albumId, password });\n\n     try {\n          const res = await axios.post(\n               `/api/albums/private/${albumId}`,\n               body,\n               config\n          );\n          dispatch({\n               type: ALBUM_AUTH_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAlbum(albumId));\n     } catch (err) {\n          dispatch({\n               type: ALBUM_AUTH_FAIL,\n          });\n          dispatch(getAlbum(albumId));\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n     }\n};\n\nexport const deleteAlbum = (id) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     if (\n          window.confirm(\n               'Are you sure you want to delete this album? This action cannot be undone and all posts within the album will be permanently deleted'\n          )\n     ) {\n          try {\n               const res = await axios.delete(`/api/albums/${id}`, config);\n               dispatch({\n                    type: DELETE_ALBUM_SUCCESS,\n                    payload: res.data,\n               });\n               dispatch(getAllAlbums());\n               dispatch(setAlert('This album has been permanentely deleted'));\n          } catch (err) {\n               const errors = err.response.data;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_ALBUM_FAIL,\n               });\n          }\n     }\n};\n\nexport const albumNameChange = (album_id, { newTitle }) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n\n     const body = JSON.stringify({ newTitle });\n     try {\n          await axios.put(`/api/albums/${album_id}`, body, config);\n          dispatch({\n               type: CHANGE_ALBUM_NAME_SUCCESS,\n          });\n          dispatch(getAllAlbums());\n          dispatch(setAlert('Album name has been successfully updated'));\n     } catch (err) {\n          const errors = err.response.data;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: CHANGE_ALBUM_NAME_FAIL,\n          });\n     }\n};\n\nexport const albumPasswordChange = (\n     album_id,\n     { newPassword, passwordRequired }\n) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ newPassword, passwordRequired });\n     try {\n          await axios.put(`/api/albums/password/${album_id}`, body, config);\n          dispatch({\n               type: CHANGE_ALBUM_PW_SUCCESS,\n          });\n          dispatch(getAllAlbums());\n          dispatch(\n               setAlert(\n                    'Album password settings have been successfully updated'\n               )\n          );\n     } catch (err) {\n          const errors = err.response.data;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: CHANGE_ALBUM_PW_FAIL,\n          });\n     }\n};\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport { getAllAlbums } from '../../../actions/albumActions';\n\nimport './style.css';\n\nconst AlbumList = ({ albums, getAllAlbums }) => {\n     useEffect(() => {\n          getAllAlbums();\n     }, [getAllAlbums]);\n\n     let albumLength = albums.albums.length;\n     let albumLoading = albums.isLoading;\n\n     return albumLength === 0 ? (\n          <Fragment>No albums added</Fragment>\n     ) : !albumLoading ? (\n          albums.albums.map((album) => (\n               <div class='flip-card' key={album._id}>\n                    <div class='flip-card-inner'>\n                         <Link to={`/album/${album._id}`}>\n                              <div class='flip-card-front'>{album.title}</div>\n                              <div class='flip-card-back'>\n                                   Created on:{' '}\n                                   <Moment\n                                        format='MM/DD/YYYY'\n                                        date={album.date}\n                                   ></Moment>\n                              </div>\n                         </Link>\n                    </div>\n               </div>\n          ))\n     ) : (\n          <h1>Loading your albums</h1>\n     );\n};\n\nAlbumList.propTypes = {\n     getAllAlbums: PropTypes.func.isRequired,\n     auth: PropTypes.object.isRequired,\n     albums: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n     albums: state.album,\n});\n\nexport default connect(mapStateToProps, { getAllAlbums })(AlbumList);\n","import React from 'react';\nimport { Button } from 'reactstrap';\n\nconst SubmitButton = (props) => {\n     return (\n          <Button color='dark' style={{ marginBottom: '2rem' }}>\n               Submit\n          </Button>\n     );\n};\n\nexport default SubmitButton;\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../../actions/alertActions';\nimport { addNewAlbum } from '../../../actions/albumActions';\nimport { Form, FormGroup, Label, Input, Col, Row } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport SubmitButton from '../../Buttons/SubmitBtn';\nimport AlertDiv from '../../Layout/AlertDiv';\n\nconst AddAlbumForm = ({ setAlert, addNewAlbum, toggle, isAuth }) => {\n     // using the UseState hook from react\n     const [formData, setFormData] = useState({\n          title: '',\n          password: '',\n     });\n\n     const [passwordRequired, setPasswordRequired] = useState(false);\n\n     const { title, password } = formData;\n\n     // handler to update the data\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const handleCheckboxChange = () => {\n          setPasswordRequired(!passwordRequired);\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          if (title === '') {\n               setAlert('All albums need a title', 'danger');\n          } else if (passwordRequired && password === '') {\n               setAlert(\n                    'Please include a password or uncheck the box',\n                    'danger'\n               );\n          } else {\n               try {\n                    addNewAlbum({ title, passwordRequired, password });\n                    setFormData({ ...formData, title: '' });\n                    await setPasswordRequired(false);\n                    toggle();\n               } catch (err) {}\n          }\n     };\n\n     if (!isAuth) {\n          return <Redirect to='/' />;\n     }\n\n     return (\n          <Fragment>\n               <AlertDiv />\n               <Form className='form' onSubmit={onSubmit}>\n                    <Row form>\n                         <Col md={12}>\n                              <FormGroup>\n                                   <label htmlFor='title'>Album title</label>\n                                   <input\n                                        type='text'\n                                        name='title'\n                                        className='form-control'\n                                        onChange={onChange}\n                                        value={title}\n                                   />\n                              </FormGroup>\n                         </Col>\n                    </Row>\n                    <Row form>\n                         <Col md={6}>\n                              <FormGroup check className='mb-5 mt-3'>\n                                   <Label check>\n                                        <Input\n                                             type='checkbox'\n                                             name='addPassword'\n                                             // value={addPassword}\n                                             onChange={handleCheckboxChange}\n                                             isChecked={passwordRequired}\n                                        />\n                                        Add password to this album\n                                   </Label>\n                              </FormGroup>\n                         </Col>\n                         {passwordRequired ? (\n                              <Col md={6}>\n                                   <FormGroup>\n                                        <label htmlFor='password'>\n                                             Album password\n                                        </label>\n                                        <input\n                                             type='text'\n                                             name='password'\n                                             className='form-control'\n                                             onChange={onChange}\n                                             value={password}\n                                        />\n                                   </FormGroup>\n                              </Col>\n                         ) : null}\n                    </Row>\n                    <SubmitButton />\n               </Form>\n          </Fragment>\n     );\n};\n\nAddAlbumForm.propTypes = {\n     isAuth: PropTypes.bool,\n     setAlert: PropTypes.func.isRequired,\n     addNewAlbum: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, addNewAlbum })(\n     AddAlbumForm\n);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst AddAlbumModal = (props) => {\n     const closeBtn = (\n          <button className='close' onClick={props.toggle}>\n               &times;\n          </button>\n     );\n\n     return (\n          <div>\n               <Modal isOpen={props.isOpen} className='addModal'>\n                    <ModalHeader close={closeBtn}>Add a New Album</ModalHeader>\n                    <ModalBody>{props.children}</ModalBody>\n               </Modal>\n          </div>\n     );\n};\n\nexport default AddAlbumModal;\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport './style.css';\n\nconst ModalButton = (props) => {\n     return (\n          <Button\n               className='modalButton'\n               {...props}\n               onClick={props.onClick}\n               action={props.action}\n          >\n               {props.action}\n          </Button>\n     );\n};\n\nexport default ModalButton;\n","import React, { useState } from 'react';\nimport MaterialIcon from 'material-icons-react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Container, Row } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\n\nimport PageTitle from '../components/Layout/PageTitle';\nimport AlbumList from '../components/Album/AlbumList';\nimport AddAlbumForm from '../components/Album/AddAlbumForm';\nimport AddAlbumModal from '../components/Album/AddAlbumModal';\nimport ModalButton from '../components/Buttons/ModalButton';\nimport AlertDiv from '../components/Layout/AlertDiv';\nimport '../App.css';\n\nconst Dashboard = ({ isAuth, auth }) => {\n     const addIcon = <MaterialIcon icon='add' color='#252525' size='large' />;\n\n     const [modal, setModal] = useState(false);\n\n     const toggle = () => {\n          setModal(!modal);\n     };\n\n     return auth.isLoading ? (\n          <h1>Loading your memories</h1>\n     ) : !isAuth ? (\n          <Redirect to='/' />\n     ) : (\n          <>\n               <Container fluid={true}>\n                    <PageTitle>\n                         Welcome to your memory albums, {auth.user.firstName}{' '}\n                         {auth.user.lastName}\n                    </PageTitle>\n\n                    <AlertDiv />\n               </Container>\n               <Row>\n                    <AlbumList />\n               </Row>\n\n               <AddAlbumModal toggle={toggle} isOpen={modal}>\n                    <AddAlbumForm toggle={toggle} />\n               </AddAlbumModal>\n               <div className='buttonContainer'>\n                    <ModalButton\n                         className='albumButton modalButton'\n                         action={addIcon}\n                         onClick={toggle}\n                         style={{ padding: '15px' }}\n                    />\n               </div>\n          </>\n     );\n};\n\nAddAlbumForm.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     auth: PropTypes.object.isRequired,\n};\n\nContainer.propTypes = {\n     fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(Dashboard);\n","import React, { useState } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { changePw } from '../../../actions/authActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport './style.css';\n\nconst ChangePasswordForm = (props) => {\n     const [formData, setFormData] = useState({\n          oldPassword: '',\n          newPassword: '',\n          newPassword2: '',\n     });\n     const { oldPassword, newPassword, newPassword2 } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          try {\n               props.changePw({ oldPassword, newPassword, newPassword2 });\n               setFormData({\n                    ...formData,\n                    oldPassword: '',\n                    newPassword: '',\n                    newPassword2: '',\n               });\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     if (!props.isAuth) {\n          return <Redirect to='/' />;\n     }\n\n     return (\n          <Form\n               className='form clearfix'\n               id='changePasswordForm'\n               onSubmit={onSubmit}\n          >\n               <FormGroup>\n                    <Label htmlFor='oldPassword'>Current password</Label>\n                    <Input\n                         type='password'\n                         id='oldPassword'\n                         name='oldPassword'\n                         className='form-control'\n                         value={oldPassword}\n                         onChange={onChange}\n                    />\n               </FormGroup>\n\n               <FormGroup>\n                    <Label htmlFor='newPassword'>New password</Label>\n                    <Input\n                         type='password'\n                         id='newPassword'\n                         name='newPassword'\n                         className='form-control'\n                         value={newPassword}\n                         onChange={onChange}\n                    />\n               </FormGroup>\n               <FormGroup>\n                    <Label htmlFor='newPassword2'>Confirm new password</Label>\n                    <Input\n                         type='password'\n                         id='newPassword2'\n                         name='newPassword2'\n                         className='form-control'\n                         value={newPassword2}\n                         onChange={onChange}\n                    />\n               </FormGroup>\n               <Button\n                    type='submit'\n                    value='changePw'\n                    className='btn'\n                    id='pw-submit-btn'\n               >\n                    Change Password\n               </Button>\n          </Form>\n     );\n};\n\nChangePasswordForm.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     changePw: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { changePw })(ChangePasswordForm);\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { deleteAccount } from '../../../actions/authActions';\n\nconst DeleteUser = ({ deleteAccount }) => {\n     const onClick = async () => {\n          try {\n               deleteAccount();\n               return <Redirect to='/' />;\n          } catch (err) {\n               console.error(err);\n          }\n     };\n     return (\n          <Button className='btn btn-danger' onClick={onClick}>\n               Delete Account\n          </Button>\n     );\n};\n\nDeleteUser.propTypes = {\n     deleteAccount: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { deleteAccount })(DeleteUser);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setAlert } from '../../../actions/alertActions';\nimport { albumPasswordChange } from '../../../actions/albumActions';\nimport { Form, FormGroup, Label, Input, FormText, Button } from 'reactstrap';\n\nconst AlbumPassword = (props) => {\n     const [newPassword, setNewPassword] = useState('');\n\n     const onPasswordChange = (event) => {\n          setNewPassword(event.target.value);\n     };\n\n     const [passwordRequired, setPasswordRequired] = useState(\n          props.passwordRequired\n     );\n\n     const handleCheckboxChange = () => {\n          setPasswordRequired(!passwordRequired);\n     };\n\n     const onPasswordSubmit = async (event) => {\n          event.preventDefault();\n          if (\n               (passwordRequired && newPassword === '') ||\n               (!passwordRequired && !newPassword === '')\n          ) {\n               props.setAlert(\n                    'Please include a password or uncheck the box',\n                    'danger'\n               );\n          }\n          try {\n               const album_id = event.target.getAttribute('id');\n               await props.albumPasswordChange(album_id, {\n                    newPassword,\n                    passwordRequired,\n               });\n               setNewPassword('');\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     return (\n          <Form className='form' onSubmit={onPasswordSubmit} id={props.id}>\n               {/* <Row form> */}\n               {!props.passwordRequired ? (\n                    <p>No password currently required to view this album</p>\n               ) : (\n                    <p>Password is required to view this album</p>\n               )}\n               <FormGroup>\n                    <Label>\n                         <Input\n                              type='checkbox'\n                              name='newPassword'\n                              value={newPassword}\n                              onChange={handleCheckboxChange}\n                              defaultChecked={props.passwordRequired}\n                              isChecked={passwordRequired}\n                         />\n                         Require password\n                    </Label>\n               </FormGroup>\n\n               {passwordRequired ? (\n                    <FormGroup>\n                         <label htmlFor='newPassword'>\n                              {props.passwordRequired ? (\n                                   <span>Update password</span>\n                              ) : (\n                                   <span>Add a password</span>\n                              )}\n                         </label>\n                         <input\n                              type='text'\n                              name='newPassword'\n                              className='form-control'\n                              onChange={onPasswordChange}\n                              value={newPassword}\n                         />\n                    </FormGroup>\n               ) : null}\n\n               {/* </Row> */}\n               <Button>Save Changes</Button>\n               <FormText color='muted'>\n                    Submit form to save all changes\n               </FormText>\n          </Form>\n     );\n};\n\nAlbumPassword.propTypes = {\n     setAlert: PropTypes.func.isRequired,\n     albumPasswordChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, albumPasswordChange })(\n     AlbumPassword\n);\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SubmitButton from '../../Buttons/SubmitBtn';\n\nimport {\n     Card,\n     Col,\n     Row,\n     Form,\n     FormGroup,\n     Label,\n     Input,\n     TabContent,\n     TabPane,\n     CardTitle,\n     Button,\n     Nav,\n     NavItem,\n     NavLink,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport {\n     deleteAlbum,\n     getAllAlbums,\n     albumNameChange,\n} from '../../../actions/albumActions';\n\nimport './style.css';\nimport AlbumPassword from '../AlbumPassword';\n\nconst AlbumSettings = ({\n     albums,\n     getAllAlbums,\n     deleteAlbum,\n     albumNameChange,\n}) => {\n     useEffect(() => {\n          getAllAlbums();\n     }, [getAllAlbums]);\n\n     let albumLength = albums.albums.length;\n     let albumLoading = albums.isLoading;\n\n     const deleteClick = async (event) => {\n          event.preventDefault();\n          const album_id = event.target.getAttribute('id');\n          await deleteAlbum(album_id);\n     };\n     const [activeTab, setActiveTab] = useState('delete');\n\n     const toggle = (tab) => {\n          if (activeTab !== tab) setActiveTab(tab);\n     };\n\n     const deleteId = (album_id) => {\n          return `delete${album_id}`;\n     };\n\n     const nameId = (album_id) => {\n          return `name${album_id}`;\n     };\n\n     const passwordId = (album_id) => {\n          return `password${album_id}`;\n     };\n\n     const [newTitle, setNewTitle] = useState('');\n\n     const onAlbumTitleChange = (event) => {\n          setNewTitle(event.target.value);\n     };\n\n     const submitAlbumTitle = async (event, album_id) => {\n          event.preventDefault();\n          try {\n               await albumNameChange(album_id, { newTitle });\n               setNewTitle('');\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     return albumLength === 0 ? (\n          <Fragment>No albums added</Fragment>\n     ) : !albumLoading ? (\n          albums.albums.map((album) => (\n               <Fragment>\n                    <Fragment key={album._id}>\n                         <Card className='albumSettingsCard'>\n                              <CardTitle>{album.title}</CardTitle>\n                              <Row>\n                                   <Col xs='4'>\n                                        <Nav vertical>\n                                             <NavItem>\n                                                  <NavLink\n                                                       className={classnames({\n                                                            active:\n                                                                 activeTab ===\n                                                                 `name${album._id}`,\n                                                       })}\n                                                       onClick={() => {\n                                                            toggle(\n                                                                 `name${album._id}`\n                                                            );\n                                                       }}\n                                                  >\n                                                       Album Name\n                                                  </NavLink>\n                                             </NavItem>\n                                             <NavItem>\n                                                  <NavLink\n                                                       className={classnames({\n                                                            active:\n                                                                 activeTab ===\n                                                                 `password${album._id}`,\n                                                       })}\n                                                       onClick={() => {\n                                                            toggle(\n                                                                 `password${album._id}`\n                                                            );\n                                                       }}\n                                                  >\n                                                       Album Password\n                                                  </NavLink>\n                                             </NavItem>\n                                             <NavItem>\n                                                  <NavLink\n                                                       className={classnames({\n                                                            active:\n                                                                 activeTab ===\n                                                                 `delete${album._id}`,\n                                                       })}\n                                                       onClick={() => {\n                                                            toggle(\n                                                                 `delete${album._id}`\n                                                            );\n                                                       }}\n                                                  >\n                                                       Delete Album?\n                                                  </NavLink>\n                                             </NavItem>\n                                        </Nav>\n                                   </Col>\n                                   <Col xs='8'>\n                                        <TabContent activeTab={activeTab}>\n                                             <TabPane tabId={nameId(album._id)}>\n                                                  <Form\n                                                       className='form'\n                                                       onSubmit={(event) =>\n                                                            submitAlbumTitle(\n                                                                 event,\n                                                                 album._id\n                                                            )\n                                                       }\n                                                  >\n                                                       <FormGroup>\n                                                            <Label htmlFor='newTitle'>\n                                                                 New album title\n                                                            </Label>\n                                                            <Input\n                                                                 type='text'\n                                                                 name='newTitle'\n                                                                 value={\n                                                                      newTitle\n                                                                 }\n                                                                 onChange={\n                                                                      onAlbumTitleChange\n                                                                 }\n                                                            />\n                                                       </FormGroup>\n                                                       <SubmitButton />\n                                                  </Form>\n                                             </TabPane>\n                                             <TabPane\n                                                  tabId={passwordId(album._id)}\n                                             >\n                                                  <AlbumPassword\n                                                       id={album._id}\n                                                       passwordRequired={\n                                                            album.passwordRequired\n                                                       }\n                                                  />\n                                             </TabPane>\n                                             <TabPane\n                                                  tabId={deleteId(album._id)}\n                                             >\n                                                  <p>\n                                                       Deleting this album will\n                                                       permanently delete the\n                                                       album and all posts\n                                                       within this album. This\n                                                       action cannot be undone -\n                                                       click carefully!\n                                                  </p>\n                                                  <Button\n                                                       id={album._id}\n                                                       onClick={deleteClick}\n                                                       className='mx-auto'\n                                                  >\n                                                       Delete\n                                                  </Button>\n                                             </TabPane>\n                                        </TabContent>\n                                   </Col>\n                              </Row>\n                         </Card>\n                    </Fragment>\n               </Fragment>\n          ))\n     ) : (\n          <h1>Loading your albums</h1>\n     );\n};\n\nAlbumSettings.propTypes = {\n     getAllAlbums: PropTypes.func.isRequired,\n     deleteAlbum: PropTypes.func.isRequired,\n     albumNameChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n     albums: state.album,\n});\n\nexport default connect(mapStateToProps, {\n     getAllAlbums,\n     deleteAlbum,\n     albumNameChange,\n})(AlbumSettings);\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n     Container,\n     TabContent,\n     TabPane,\n     Nav,\n     NavItem,\n     NavLink,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport PageTitle from '../components/Layout/PageTitle';\nimport ChangePasswordForm from '../components/Settings/ChangePasswordForm';\nimport DeleteUser from '../components/Settings/DeleteUser';\nimport AlbumSettings from '../components/Settings/AlbumSettings';\nimport AlertDiv from '../components/Layout/AlertDiv';\nimport '../App.css';\nimport classnames from 'classnames';\n\nconst AccountSettings = ({ auth }) => {\n     const [activeTab, setActiveTab] = useState('1');\n     const toggle = (tab) => {\n          if (activeTab !== tab) setActiveTab(tab);\n     };\n     return auth.isLoading ? (\n          <h1>Loading</h1>\n     ) : (\n          <Fragment>\n               <Container fluid={true}>\n                    <PageTitle>Your Settings</PageTitle>\n               </Container>\n\n               <Fragment>\n                    <Nav tabs>\n                         <NavItem>\n                              <NavLink\n                                   className={classnames({\n                                        active: activeTab === '1',\n                                   })}\n                                   onClick={() => {\n                                        toggle('1');\n                                   }}\n                              >\n                                   Album Settings\n                              </NavLink>\n                         </NavItem>\n                         <NavItem>\n                              <NavLink\n                                   className={classnames({\n                                        active: activeTab === '2',\n                                   })}\n                                   onClick={() => {\n                                        toggle('2');\n                                   }}\n                              >\n                                   Account Settings\n                              </NavLink>\n                         </NavItem>\n                    </Nav>\n                    <TabContent activeTab={activeTab}>\n                         <TabPane tabId='1' id='albumSettings'>\n                              <h4 className='mt-3 mb-3'>Album Settings</h4>\n                              <AlertDiv />\n                              <AlbumSettings />\n                         </TabPane>\n                         <TabPane tabId='2' id='accountSettings'>\n                              <div className='center'>\n                                   <h4 className='mt-3 mb-3'>\n                                        Account Settings\n                                   </h4>\n                                   <AlertDiv />\n                                   <hr />\n                                   <h5 className='mt-3 mb-3'>\n                                        Update Account Password\n                                   </h5>\n\n                                   <ChangePasswordForm />\n                                   <hr />\n                                   <h5 className='mt-3 mb-3'>\n                                        Delete User Account\n                                   </h5>\n                                   <DeleteUser />\n                              </div>\n                         </TabPane>\n                    </TabContent>\n               </Fragment>\n          </Fragment>\n     );\n};\n\nAccountSettings.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     auth: PropTypes.object.isRequired,\n};\n\nContainer.propTypes = {\n     fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(AccountSettings);\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport {\n     GET_PICTURES_SUCCESS,\n     GET_PICTURES_FAIL,\n     ADD_PICTURE_SUCCESS,\n     ADD_PICTURE_FAIL,\n     DELETE_PICTURE_SUCCESS,\n     DELETE_PICTURE_FAIL,\n} from './types';\nimport { getAlbum } from './albumActions';\n\nexport const getPictures = (id) => async (dispatch) => {\n     try {\n          const res = await axios.get(`/api/pictures/album/${id}`);\n          dispatch({\n               type: GET_PICTURES_SUCCESS,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: GET_PICTURES_FAIL,\n               payload: {\n                    msg: err.response.status.text,\n                    status: err.response.status,\n               },\n          });\n     }\n};\n\nexport const addNewPicture = (album_id, formData) => async (dispatch) => {\n     const config = {\n          headers: {\n               // 'Content-Type': 'application/json',\n               'Content-Type': 'multipart/form-data',\n               // encType: 'multipart/form-data',\n               mode: 'no-cors',\n          },\n     };\n\n     try {\n          const res = await axios.post(\n               `/api/pictures/${album_id}`,\n               formData,\n               config\n          );\n\n          dispatch({\n               type: ADD_PICTURE_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAlbum(album_id));\n          dispatch(getPictures(album_id));\n     } catch (err) {\n          const errors = err.response;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: ADD_PICTURE_FAIL,\n          });\n     }\n};\n\nexport const deletePicture = (picture_id, album_id) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     if (\n          window.confirm(\n               'Are you sure you want to delete this picture? This action cannot be undone'\n          )\n     ) {\n          try {\n               const res = await axios.delete(\n                    `/api/pictures/${picture_id}`,\n                    config\n               );\n               dispatch({\n                    type: DELETE_PICTURE_SUCCESS,\n                    payload: res.data,\n               });\n               dispatch(getAlbum(album_id));\n               dispatch(getPictures(album_id));\n          } catch (err) {\n               const errors = err.response;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_PICTURE_FAIL,\n               });\n          }\n     }\n};\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../../actions/alertActions';\nimport { addNewPicture } from '../../../actions/pictureActions';\nimport { Form, FormGroup } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport AlertDiv from '../../Layout/AlertDiv';\nimport SubmitButton from '../../Buttons/SubmitBtn';\n\nconst AddPictureForm = ({ setAlert, addNewPicture, toggle }) => {\n     // using the UseState hook from react\n     const [caption, setCaption] = useState('');\n     const [uploadedBy, setUploadedBy] = useState('');\n     const [dateRecorded, setDateRecorded] = useState('');\n     const [image, setImage] = useState({});\n\n     const onCaptionChange = (event) => {\n          setCaption(event.target.value);\n     };\n\n     const onUploadedByChange = (event) => {\n          setUploadedBy(event.target.value);\n     };\n\n     const onDateRecordedChange = (event) => {\n          setDateRecorded(event.target.value);\n     };\n\n     const onDrop = (event) => {\n          setImage(event.target.files[0]);\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n\n          let pathArray = window.location.pathname.split('/');\n          let albumId = pathArray[pathArray.length - 1];\n          const formData = new FormData();\n\n          formData.append('caption', caption);\n          formData.append('uploadedBy', uploadedBy);\n          formData.append('dateRecorded', dateRecorded);\n          formData.append('image', image);\n\n          if (formData.get('image') === '[object Object]') {\n               setAlert('Picture memories must include an image', 'danger');\n          } else if (\n               caption === '' ||\n               uploadedBy === '' ||\n               dateRecorded === ''\n          ) {\n               setAlert(\n                    'Please fill out all fields to thoroughly document your memory!',\n                    'danger'\n               );\n          } else {\n               try {\n                    await addNewPicture(albumId, formData);\n                    setCaption('');\n                    setUploadedBy('');\n                    setDateRecorded('');\n                    setImage({});\n                    toggle();\n               } catch (err) {\n                    if (err.response.status === 500) {\n                         console.log('Server problem');\n                    } else {\n                         console.log(err.response.data.msg);\n                    }\n               }\n          }\n     };\n\n     return (\n          <Fragment>\n               <AlertDiv />\n               <Form\n                    className='form'\n                    encType='multipart/form-data'\n                    onSubmit={onSubmit}\n               >\n                    <FormGroup>\n                         <input type='file' name='image' onChange={onDrop} />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='caption'>Caption</label>\n                         <textarea\n                              name='caption'\n                              className='form-control'\n                              onChange={onCaptionChange}\n                              value={caption}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='uploadedBy'>Memory uploaded by:</label>\n                         <input\n                              type='text'\n                              name='uploadedBy'\n                              className='form-control'\n                              onChange={onUploadedByChange}\n                              value={uploadedBy}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='dateRecorded'>\n                              Date the photo was taken:\n                         </label>\n                         <input\n                              type='text'\n                              name='dateRecorded'\n                              className='form-control'\n                              onChange={onDateRecordedChange}\n                              value={dateRecorded}\n                         />\n                    </FormGroup>\n                    <SubmitButton />\n               </Form>\n          </Fragment>\n     );\n};\n\nAddPictureForm.propTypes = {\n     isAuth: PropTypes.bool,\n     setAlert: PropTypes.func.isRequired,\n     addNewPicture: PropTypes.func.isRequired,\n     // uploadPicture: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n     setAlert,\n     addNewPicture,\n})(AddPictureForm);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst AddPictureModal = (props) => {\n     const closeBtn = (\n          <button className='close' onClick={props.toggle}>\n               &times;\n          </button>\n     );\n\n     return (\n          <div>\n               <Modal isOpen={props.isOpen} className='addModal'>\n                    <ModalHeader close={closeBtn}>\n                         Add a New Photo Memory\n                    </ModalHeader>\n                    <ModalBody>{props.children}</ModalBody>\n               </Modal>\n          </div>\n     );\n};\n\nexport default AddPictureModal;\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport {\n     GET_PROMPTS_SUCCESS,\n     GET_PROMPTS_FAIL,\n     ADD_PROMPT_SUCCESS,\n     ADD_PROMPT_FAIL,\n     DELETE_PROMPT_SUCCESS,\n     DELETE_PROMPT_FAIL,\n} from './types';\nimport { getAlbum } from './albumActions';\n\nexport const getPrompts = (album_id) => async (dispatch) => {\n     try {\n          const res = await axios.get(`/api/prompts/album/${album_id}`);\n          dispatch({\n               type: GET_PROMPTS_SUCCESS,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: GET_PROMPTS_FAIL,\n               payload: {\n                    msg: err.response.status.text,\n                    status: err.response.status,\n               },\n          });\n     }\n};\n\nexport const addNewPrompt = (\n     album_id,\n     { prompt, response, uploadedBy, dateRecorded }\n) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     const body = JSON.stringify({\n          prompt,\n          response,\n          uploadedBy,\n          dateRecorded,\n     });\n     try {\n          const res = await axios.post(\n               `/api/prompts/${album_id}`,\n               body,\n               config\n          );\n\n          dispatch({\n               type: ADD_PROMPT_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAlbum(album_id));\n          dispatch(getPrompts(album_id));\n     } catch (err) {\n          const errors = err.response;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: ADD_PROMPT_FAIL,\n          });\n     }\n};\n\nexport const deletePrompt = (prompt_id, album_id) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     if (\n          window.confirm(\n               'Are you sure you want to delete this memory? This action cannot be undone'\n          )\n     ) {\n          try {\n               const res = await axios.delete(\n                    `/api/prompts/${prompt_id}`,\n                    config\n               );\n               dispatch({\n                    type: DELETE_PROMPT_SUCCESS,\n                    payload: res.data,\n               });\n               dispatch(getAlbum(album_id));\n               dispatch(getPrompts(album_id));\n          } catch (err) {\n               const errors = err.response;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_PROMPT_FAIL,\n               });\n          }\n     }\n};\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../../actions/alertActions';\nimport { addNewPrompt } from '../../../actions/promptActions';\nimport { Form, FormGroup } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport SubmitButton from '../../Buttons/SubmitBtn';\nimport AlertDiv from '../../Layout/AlertDiv';\n\nconst AddPromptForm = ({ setAlert, addNewPrompt, toggle }) => {\n     const [formData, setFormData] = useState({\n          prompt: '',\n          response: '',\n          uploadedBy: '',\n          dateRecorded: '',\n     });\n\n     const { prompt, response, uploadedBy, dateRecorded } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          let pathArray = window.location.pathname.split('/');\n          let albumId = pathArray[pathArray.length - 1];\n          if (\n               prompt === '' ||\n               response === '' ||\n               uploadedBy === '' ||\n               dateRecorded === ''\n          ) {\n               setAlert(\n                    'Please fill out all fields to thoroughly document your memory!',\n                    'danger'\n               );\n          } else {\n               try {\n                    addNewPrompt(albumId, {\n                         prompt,\n                         response,\n                         uploadedBy,\n                         dateRecorded,\n                    });\n                    setFormData({\n                         ...formData,\n                         prompt: '',\n                         response: '',\n                         uploadedBy: '',\n                         dateRecorded: '',\n                    });\n                    toggle();\n               } catch (err) {}\n          }\n     };\n\n     return (\n          <Fragment>\n               <AlertDiv />\n               <Form className='form' onSubmit={onSubmit}>\n                    <FormGroup>\n                         <label htmlFor='prompt'>Prompt</label>\n                         <input\n                              type='text'\n                              name='prompt'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={prompt}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='response'>Response</label>\n                         <textarea\n                              // type='textarea'\n                              name='response'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={response}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='uploadedBy'>Uploaded By:</label>\n                         <input\n                              type='text'\n                              name='uploadedBy'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={uploadedBy}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='dateRecorded'>Date Recorded:</label>\n                         <input\n                              type='text'\n                              name='dateRecorded'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={dateRecorded}\n                         />\n                    </FormGroup>\n\n                    <SubmitButton />\n               </Form>\n          </Fragment>\n     );\n};\n\nAddPromptForm.propTypes = {\n     isAuth: PropTypes.bool,\n     setAlert: PropTypes.func.isRequired,\n     addNewPrompt: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, addNewPrompt })(\n     AddPromptForm\n);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst AddPromptModal = (props) => {\n     const closeBtn = (\n          <button className='close' onClick={props.toggle}>\n               &times;\n          </button>\n     );\n\n     return (\n          <div>\n               <Modal isOpen={props.isOpen} className='addModal'>\n                    <ModalHeader close={closeBtn}>\n                         Add a New Memory Post\n                    </ModalHeader>\n                    <ModalBody>{props.children}</ModalBody>\n               </Modal>\n          </div>\n     );\n};\n\nexport default AddPromptModal;\n","import React from 'react';\nimport { Card, CardImg, CardBody, CardTitle } from 'reactstrap';\nimport './style.css';\nimport Moment from 'react-moment';\n\nconst MixedPostPicture = (props) => {\n     return (\n          <Card\n               onClick={props.onClick}\n               data-id={props.id}\n               type='picture'\n               className='mixedPostPicture'\n          >\n               <CardImg\n                    type='picture'\n                    src={props.image}\n                    data-id={props.id}\n                    alt={props.caption}\n                    className='image'\n               />\n               <CardBody className='overlay' data-id={props.id} type='picture'>\n                    <CardTitle>\n                         <div\n                              className='text'\n                              type='picture'\n                              data-id={props.id}\n                         >\n                              Uploaded by {props.uploadedBy} on{' '}\n                              <Moment\n                                   format='MM/DD/YYYY'\n                                   date={props.dateUploaded}\n                              />\n                         </div>\n                    </CardTitle>\n               </CardBody>\n          </Card>\n     );\n};\n\nexport default MixedPostPicture;\n","import React, { Fragment } from 'react';\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\nimport './style.css';\nimport Moment from 'react-moment';\n\nconst MixedPostPrompt = (props) => {\n     return (\n          <Card\n               onClick={props.onClick}\n               data-id={props.id}\n               type='prompt'\n               className='mixedPostPrompt'\n          >\n               <CardBody data-id={props.id} type='prompt'>\n                    <CardText data-id={props.id} type='prompt'>\n                         {props.prompt}. . .\n                         <br />\n                         {/* {props.response} */}\n                    </CardText>\n                    <div className='overlay' data-id={props.id} type='prompt'>\n                         <CardTitle\n                              className='text'\n                              data-id={props.id}\n                              type='prompt'\n                         >\n                              Uploaded{' '}\n                              {props.uploadedBy ? (\n                                   <Fragment>by {props.uploadedBy} </Fragment>\n                              ) : null}\n                              on{' '}\n                              <Moment\n                                   data-id={props.id}\n                                   format='MM/DD/YYYY'\n                                   date={props.dateUploaded}\n                              />\n                         </CardTitle>\n                    </div>\n               </CardBody>\n          </Card>\n     );\n};\n\nexport default MixedPostPrompt;\n","import React from 'react';\nimport {\n     Card,\n     CardImg,\n     CardText,\n     CardTitle,\n     CardSubtitle,\n     CardBody,\n} from 'reactstrap';\nimport './style.css';\nimport Moment from 'react-moment';\n\nconst CarouselPicture = (props) => {\n     return (\n          <Card className='carouselPicture' style={Card.CarouselPicture}>\n               <CardTitle>\n                    <Moment format='MM/DD/YYYY' date={props.dateUploaded} />\n               </CardTitle>\n               <CardSubtitle>Uploaded by {props.uploadedBy}</CardSubtitle>\n               <div className='memoryArea vertical-center'>\n                    <CardImg src={props.image} alt={props.caption} />\n               </div>\n               <span id='caption'>Caption:</span>\n               <CardBody>\n                    <CardText>{props.caption}</CardText>\n               </CardBody>\n          </Card>\n     );\n};\n\nexport default CarouselPicture;\n","import React from 'react';\nimport { Card, CardText, CardTitle, CardSubtitle, CardBody } from 'reactstrap';\nimport Moment from 'react-moment';\n\nimport './style.css';\n\nconst CarouselPrompt = (props) => {\n     return (\n          <Card className='carouselPrompt' style={Card.CarouselPicture}>\n               <CardTitle>\n                    <Moment format='MM/DD/YYYY' date={props.dateUploaded} />\n               </CardTitle>\n               <CardSubtitle>Uploaded by {props.uploadedBy}</CardSubtitle>\n               <div className='center'>\n                    <div className='memoryArea'>\n                         <span className='memoryText'>\n                              <span className='prompt'>{props.prompt}</span>\n                              <br />\n                              <span className='response'>{props.response}</span>\n                         </span>\n                    </div>\n                    <CardBody>\n                         <CardText>\n                              Memory recorded on{' '}\n                              <Moment\n                                   format='MM/DD/YYYY'\n                                   date={props.dateRecorded}\n                              />\n                         </CardText>\n                    </CardBody>\n               </div>\n          </Card>\n     );\n};\n\nexport default CarouselPrompt;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n     Container,\n     CarouselControl,\n     CarouselItem,\n     Carousel,\n     Form,\n     Button,\n     FormGroup,\n     Modal,\n     ModalFooter,\n     Row,\n     ModalHeader,\n} from 'reactstrap';\nimport MaterialIcon from 'material-icons-react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n\nimport AddPictureForm from '../components/Picture/AddPictureForm';\nimport AddPictureModal from '../components/Picture/AddPictureModal';\nimport AddPromptForm from '../components/Prompt/AddPromptForm';\nimport AddPromptModal from '../components/Prompt/AddPromptModal';\nimport ModalButton from '../components/Buttons/ModalButton';\nimport { getAlbum, albumAuth } from '../actions/albumActions';\nimport MixedPostPicture from '../components/Picture/MixedPostPicture';\nimport MixedPostPrompt from '../components/Prompt/MixedPostPrompt';\nimport PageTitle from '../components/Layout/PageTitle';\nimport CarouselPicture from '../components/Picture/CarouselPicture';\nimport CarouselPrompt from '../components/Prompt/CarouselPrompt';\nimport { deletePicture } from '../actions/pictureActions';\nimport { deletePrompt } from '../actions/promptActions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport AlertDiv from '../components/Layout/AlertDiv';\nimport { setAlert } from '../actions/alertActions';\n\nconst Album = ({\n     getAlbum,\n     album,\n     deletePicture,\n     deletePrompt,\n     albumLoading,\n     isAuth,\n     albumAuth,\n}) => {\n     let pathArray = window.location.pathname.split('/');\n     let albumId = pathArray[pathArray.length - 1];\n\n     useEffect(() => {\n          getAlbum(albumId);\n     }, [albumId, getAlbum]);\n\n     const [promptModal, setPromptModal] = useState(false);\n     const [photoModal, setPhotoModal] = useState(false);\n     const [carouselModal, setCarouselModal] = useState(false);\n\n     const photoToggle = () => {\n          setPhotoModal(!photoModal);\n     };\n\n     const promptToggle = () => {\n          setPromptModal(!promptModal);\n     };\n\n     const carouselToggle = () => {\n          setCarouselModal(!carouselModal);\n     };\n\n     const [activeIndex, setActiveIndex] = useState(0);\n     const [currentPost, setCurrentPost] = useState({\n          id: 0,\n          type: '',\n     });\n\n     const next = () => {\n          const nextIndex =\n               activeIndex === album.album.length - 1 ? 0 : activeIndex + 1;\n          setActiveIndex(nextIndex);\n     };\n\n     const previous = () => {\n          const nextIndex =\n               activeIndex === 0 ? album.album.length - 1 : activeIndex - 1;\n          setActiveIndex(nextIndex);\n     };\n\n     const onClick = (event, data) => {\n          setActiveIndex(data);\n          setCurrentPost({\n               id: event.target.getAttribute('data-id'),\n               type: event.target.getAttribute('type'),\n          });\n          carouselToggle();\n     };\n\n     const closeBtn = (\n          <button className='close' onClick={carouselToggle}>\n               &times;\n          </button>\n     );\n\n     const deleteClick = async (event) => {\n          event.preventDefault();\n          currentPost.type === 'picture'\n               ? deletePicture(currentPost.id, albumId)\n               : deletePrompt(currentPost.id, albumId);\n          carouselToggle();\n     };\n\n     const [password, setPassword] = useState('');\n     const onChange = (event) => {\n          setPassword(event.target.value);\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          try {\n               albumAuth({ albumId, password });\n          } catch (err) {\n               console.log(err);\n          }\n     };\n\n     const pageNotFound = () => {\n          setAlert('That album cannot be found', 'danger');\n          return <Redirect to='/pagenotfound' />;\n     };\n\n     // has the album loaded yet\n     return albumLoading ? (\n          <h1>Welcome</h1>\n     ) : // if the album has loaded, is it found in the DB\n     album.validAlbum ? (\n          <Fragment>\n               {/* if the album is found, load the title */}\n               <Container fluid={true}>\n                    <PageTitle>\n                         {album.albums[0].title} by{' '}\n                         {album.albums[0].user.firstName}{' '}\n                         {album.albums[0].user.lastName}\n                    </PageTitle>\n               </Container>\n               {/* if the album is found, are you the album owner or have you entered the password IF required*/}\n               {isAuth ||\n               !album.albums[0].passwordRequired ||\n               album.authorized ? (\n                    // load the buttons to add to album if authorized\n                    <>\n                         <Fragment>\n                              <AddPictureModal\n                                   toggle={photoToggle}\n                                   isOpen={photoModal}\n                              >\n                                   <AddPictureForm toggle={photoToggle} />\n                              </AddPictureModal>\n                              <AddPromptModal\n                                   toggle={promptToggle}\n                                   isOpen={promptModal}\n                              >\n                                   <AddPromptForm toggle={promptToggle} />\n                              </AddPromptModal>\n                              <div className='buttonContainer'>\n                                   <ModalButton\n                                        className='photoButton modalButton'\n                                        action={\n                                             <MaterialIcon\n                                                  icon='add_a_photo'\n                                                  color='#252525'\n                                                  size='medium'\n                                             />\n                                        }\n                                        onClick={photoToggle}\n                                   />\n                                   <br />\n                                   <br />\n                                   <br />\n                                   <ModalButton\n                                        className='promptButton modalButton'\n                                        action={\n                                             <MaterialIcon\n                                                  icon='create'\n                                                  color='#252525'\n                                                  size='medium'\n                                             />\n                                        }\n                                        onClick={promptToggle}\n                                   />\n                              </div>\n                         </Fragment>\n                         {album.album.length > 0 ? (\n                              <>\n                                   <Row>\n                                        {album.album.map((post, index) => (\n                                             <Fragment key={post._id}>\n                                                  {'image' in post ? (\n                                                       <Fragment>\n                                                            <MixedPostPicture\n                                                                 type='picture'\n                                                                 key={post._id}\n                                                                 id={post._id}\n                                                                 uploadedBy={\n                                                                      post.uploadedBy\n                                                                 }\n                                                                 image={\n                                                                      post.image\n                                                                 }\n                                                                 caption={\n                                                                      post.caption\n                                                                 }\n                                                                 dateRecorded={\n                                                                      post.dateRecorded\n                                                                 }\n                                                                 dateUploaded={\n                                                                      post.dateUploaded\n                                                                 }\n                                                                 onClick={(\n                                                                      event\n                                                                 ) => {\n                                                                      onClick(\n                                                                           event,\n                                                                           index\n                                                                      );\n                                                                 }}\n                                                                 index={index}\n                                                            />\n                                                       </Fragment>\n                                                  ) : (\n                                                       <MixedPostPrompt\n                                                            type='prompt'\n                                                            key={post._id}\n                                                            id={post._id}\n                                                            isAuth={isAuth}\n                                                            prompt={post.prompt}\n                                                            response={\n                                                                 post.response\n                                                            }\n                                                            dateRecorded={\n                                                                 post.dateRecorded\n                                                            }\n                                                            dateUploaded={\n                                                                 post.dateUploaded\n                                                            }\n                                                            uploadedBy={\n                                                                 post.uploadedBy\n                                                            }\n                                                            onClick={(\n                                                                 event\n                                                            ) => {\n                                                                 onClick(\n                                                                      event,\n                                                                      index\n                                                                 );\n                                                            }}\n                                                            index={index}\n                                                       ></MixedPostPrompt>\n                                                  )}\n                                             </Fragment>\n                                        ))}\n                                   </Row>\n                                   <Modal\n                                        toggle={carouselToggle}\n                                        isOpen={carouselModal}\n                                        centered={true}\n                                        size='lg'\n                                        close={closeBtn}\n                                   >\n                                        <ModalHeader className='caroModal justify-content-md-end'>\n                                             {closeBtn}\n                                        </ModalHeader>\n                                        <Carousel\n                                             activeIndex={activeIndex}\n                                             next={next}\n                                             previous={previous}\n                                        >\n                                             {album.album.map((post) => (\n                                                  <CarouselItem key={post._id}>\n                                                       {'image' in post ? (\n                                                            <CarouselPicture\n                                                                 image={\n                                                                      post.image\n                                                                 }\n                                                                 caption={\n                                                                      post.caption\n                                                                 }\n                                                                 dateRecorded={\n                                                                      post.dateRecorded\n                                                                 }\n                                                                 uploadedBy={\n                                                                      post.uploadedBy\n                                                                 }\n                                                                 dateUploaded={\n                                                                      post.dateUploaded\n                                                                 }\n                                                            />\n                                                       ) : (\n                                                            <CarouselPrompt\n                                                                 response={\n                                                                      post.response\n                                                                 }\n                                                                 prompt={\n                                                                      post.prompt\n                                                                 }\n                                                                 dateRecorded={\n                                                                      post.dateRecorded\n                                                                 }\n                                                                 uploadedBy={\n                                                                      post.uploadedBy\n                                                                 }\n                                                                 dateUploaded={\n                                                                      post.dateUploaded\n                                                                 }\n                                                            />\n                                                       )}\n\n                                                       {isAuth ? (\n                                                            <ModalFooter\n                                                                 className='mixedPost-footer center'\n                                                                 onClick={\n                                                                      deleteClick\n                                                                 }\n                                                                 data-id={\n                                                                      post._id\n                                                                 }\n                                                            >\n                                                                 <div>\n                                                                      {' '}\n                                                                      Delete\n                                                                      this post\n                                                                 </div>\n                                                            </ModalFooter>\n                                                       ) : null}\n                                                  </CarouselItem>\n                                             ))}\n\n                                             <CarouselControl\n                                                  direction='prev'\n                                                  directionText='Previous'\n                                                  onClickHandler={previous}\n                                             />\n                                             <CarouselControl\n                                                  direction='next'\n                                                  directionText='Next'\n                                                  onClickHandler={next}\n                                             />\n                                        </Carousel>\n                                   </Modal>\n                              </>\n                         ) : (\n                              <p>\n                                   No posts in this album yet! Use the buttons\n                                   below to begin storing your memories\n                              </p>\n                         )}\n                    </>\n               ) : (\n                    // if you are not authorized, give option to submit a password\n                    <Form className='form' onSubmit={onSubmit}>\n                         <AlertDiv />\n                         <FormGroup>\n                              <label htmlFor='inputPassword'>\n                                   Album Password\n                              </label>\n                              <input\n                                   type='password'\n                                   name='password'\n                                   className='form-control'\n                                   onChange={onChange}\n                                   value={password}\n                              />\n                         </FormGroup>\n                         <Button type='submit' value='albumAuth'>\n                              Submit\n                         </Button>\n                    </Form>\n               )}\n          </Fragment>\n     ) : (\n          pageNotFound\n     );\n};\n\nAlbum.propTypes = {\n     isAuth: PropTypes.bool,\n     albumLoading: PropTypes.bool.isRequired,\n     auth: PropTypes.object.isRequired,\n     album: PropTypes.object.isRequired,\n     getAlbum: PropTypes.func.isRequired,\n     deletePicture: PropTypes.func.isRequired,\n     deletePrompt: PropTypes.func.isRequired,\n     albumAuth: PropTypes.func.isRequired,\n};\n\nContainer.propTypes = {\n     fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     albumLoading: state.album.isLoading,\n     auth: state.auth,\n     album: state.album,\n});\n\nexport default connect(mapStateToProps, {\n     getAlbum,\n     deletePicture,\n     deletePrompt,\n     albumAuth,\n})(Album);\n","import React from 'react';\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { logout } from '../../../actions/authActions';\nimport { Redirect } from 'react-router-dom';\nimport logo from '../../../img/logo.png';\nimport './style.css';\n\nconst AppNavbar = ({ logout, auth }) => {\n     const logoutUser = () => {\n          logout();\n          return <Redirect to='/' />;\n     };\n\n     const loggedInLinks = (\n          <Nav>\n               <NavItem>\n                    <NavLink href='/dashboard'>Dashboard</NavLink>\n               </NavItem>\n               <NavItem>\n                    <NavLink href='/accountSettings'>Settings</NavLink>\n               </NavItem>\n               <NavItem>\n                    <NavLink href='/' onClick={logoutUser}>\n                         Logout\n                    </NavLink>\n               </NavItem>\n          </Nav>\n     );\n\n     const loggedOutLinks =\n          // <Nav>\n          //      <NavItem>\n          //           <NavLink href='/'>Homepage</NavLink>\n          //      </NavItem>\n          // </Nav>\n          null;\n     const loading = auth.isLoading;\n     return (\n          <div>\n               <Navbar className='mb-1 justify-content-md-end'>\n                    {loading || !auth.isAuthenticated\n                         ? loggedOutLinks\n                         : loggedInLinks}\n                    {!auth.isAuthenticated ? (\n                         <NavbarBrand href='/'>\n                              <img src={logo} alt='two elephants hugging' />\n                              <span>Elephant's Memory</span>\n                         </NavbarBrand>\n                    ) : (\n                         <NavbarBrand href='/dashboard'>\n                              <img src={logo} alt='two elephants hugging' />\n                              <span>Elephant's Memory</span>\n                         </NavbarBrand>\n                    )}\n               </Navbar>\n          </div>\n     );\n};\n\nAppNavbar.propTypes = {\n     logout: PropTypes.func.isRequired,\n     auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { logout })(AppNavbar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({\n     component: Component,\n     auth: { isAuthenticated, isLoading },\n     ...rest\n}) => (\n     <Route\n          {...rest}\n          render={(props) =>\n               !isAuthenticated && !isLoading ? (\n                    <Redirect to='/' />\n               ) : (\n                    <Component {...props} />\n               )\n          }\n     />\n);\n\nPrivateRoute.propTypes = {\n     auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container } from 'reactstrap';\nimport MaterialIcon from 'material-icons-react';\nimport AlertDiv from '../components/Layout/AlertDiv';\n\nconst PageNotFound = ({ isAuth, isLoading }) => {\n     return (\n          <Container id='pageNotFound'>\n               <AlertDiv />\n               <h1>Whoops!</h1>\n               {/* <div className='center'> */}\n               <p>We can't seem to find the page you're looking for</p>\n               <p>\n                    <a href={isAuth ? '/dashboard' : '/'}>\n                         <MaterialIcon\n                              icon='arrow_forward'\n                              color='#252525'\n                              size='medium'\n                         />{' '}\n                         {isLoading || !isAuth ? (\n                              <span>Back to the welcome page</span>\n                         ) : (\n                              <span>Back to your dashboard</span>\n                         )}\n                    </a>\n               </p>\n          </Container>\n     );\n};\n\nPageNotFound.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     isLoading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     isLoading: state.auth.isLoading,\n});\n\nexport default connect(mapStateToProps)(PageNotFound);\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import {\n     REGISTER_SUCCESS,\n     REGISTER_FAIL,\n     USER_LOADED,\n     AUTH_ERROR,\n     LOGIN_SUCCESS,\n     LOGIN_FAIL,\n     LOGOUT_SUCCESS,\n     CHANGE_PW_SUCCESS,\n     CHANGE_PW_FAIL,\n     DELETE_USER_SUCCESS,\n     DELETE_USER_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     // get token from local storage\n     token: localStorage.getItem('token'),\n     isAuthenticated: null,\n     isLoading: true,\n     user: null,\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case CHANGE_PW_SUCCESS:\n          case USER_LOADED:\n               return {\n                    ...state,\n                    isAuthenticated: true,\n                    isLoading: false,\n                    user: action.payload,\n               };\n          case LOGIN_SUCCESS:\n          case REGISTER_SUCCESS:\n               localStorage.setItem('token', action.payload.token);\n               return {\n                    ...state,\n                    ...action.payload,\n                    isAuthenticated: true,\n                    isLoading: true,\n               };\n          case DELETE_USER_FAIL:\n          case CHANGE_PW_FAIL:\n               return {\n                    ...state,\n                    isAuthenticated: true,\n                    isLoading: false,\n               };\n          case DELETE_USER_SUCCESS:\n          case LOGIN_FAIL:\n          case LOGOUT_SUCCESS:\n          case REGISTER_FAIL:\n          case AUTH_ERROR:\n               localStorage.removeItem('token');\n               return {\n                    ...state,\n                    token: null,\n                    isAuthenticated: false,\n                    isLoading: false,\n                    user: null,\n               };\n          default:\n               return state;\n     }\n}\n","import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState = [];\n\n// actions contain type and payload, which is the data\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case SET_ALERT:\n               // state is immutable so you need to include any state that is already there\n               // aka use the spread operator to copy and then add the new alert\n               return [...state, action.payload];\n          // payload will have .msg, .id, and an alert type\n          case REMOVE_ALERT:\n               // remove a specific alert by its ID\n               return state.filter((alert) => alert.id !== action.payload);\n          // payload in this case is the ID\n          default:\n               return state;\n     }\n}\n","import {\n     ADD_ALBUM_SUCCESS,\n     ADD_ALBUM_FAIL,\n     GET_ALBUMS_SUCCESS,\n     GET_ALBUMS_FAIL,\n     GET_ALBUM_SUCCESS,\n     GET_ALBUM_FAIL,\n     DELETE_ALBUM_SUCCESS,\n     DELETE_ALBUM_FAIL,\n     DELETE_PICTURE_SUCCESS,\n     DELETE_PICTURE_FAIL,\n     ALBUM_AUTH_SUCCESS,\n     ALBUM_AUTH_FAIL,\n     CHANGE_ALBUM_NAME_SUCCESS,\n     CHANGE_ALBUM_NAME_FAIL,\n     CHANGE_ALBUM_PW_SUCCESS,\n     CHANGE_ALBUM_PW_FAIL,\n     CHANGE_PW_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     albums: [],\n     album: [],\n     validAlbum: true,\n     isLoading: true,\n     authorized: null,\n     error: {},\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case ADD_ALBUM_SUCCESS:\n               return {\n                    validAlbum: true,\n                    ...state,\n                    ...action.payload,\n                    isLoading: false,\n               };\n          case GET_ALBUMS_SUCCESS:\n               return {\n                    ...state,\n                    albums: action.payload,\n                    isLoading: false,\n               };\n          case GET_ALBUM_SUCCESS:\n               return {\n                    ...state,\n                    album: action.payload.posts,\n                    albums: action.payload.data,\n                    isLoading: false,\n                    validAlbum: true,\n               };\n          case ALBUM_AUTH_SUCCESS:\n               return {\n                    ...state,\n                    isLoading: true,\n                    authorized: true,\n               };\n          case CHANGE_ALBUM_PW_SUCCESS:\n          case CHANGE_ALBUM_NAME_SUCCESS:\n          case DELETE_PICTURE_SUCCESS:\n          case DELETE_ALBUM_SUCCESS:\n               return {\n                    ...state,\n                    isLoading: false,\n               };\n          case CHANGE_ALBUM_PW_FAIL:\n          case CHANGE_PW_FAIL:\n          case CHANGE_ALBUM_NAME_FAIL:\n          case ALBUM_AUTH_FAIL:\n          case DELETE_PICTURE_FAIL:\n          case DELETE_ALBUM_FAIL:\n          case ADD_ALBUM_FAIL:\n          case GET_ALBUMS_FAIL:\n          case GET_ALBUM_FAIL:\n               return {\n                    ...state,\n                    error: action.payload,\n                    isLoading: false,\n                    validAlbum: false,\n               };\n\n          default:\n               return state;\n     }\n}\n","import {\n     GET_PICTURES_SUCCESS,\n     GET_PICTURES_FAIL,\n     ADD_PICTURE_SUCCESS,\n     ADD_PICTURE_FAIL,\n     DELETE_PICTURE_SUCCESS,\n     DELETE_PICTURE_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     pictures: [],\n     picture: {},\n     album: null,\n     isLoading: true,\n     error: {},\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case DELETE_PICTURE_SUCCESS:\n          case ADD_PICTURE_SUCCESS:\n          case GET_PICTURES_SUCCESS:\n               return {\n                    ...state,\n                    pictures: action.payload,\n                    album: action.payload.album,\n                    isLoading: false,\n               };\n          case DELETE_PICTURE_FAIL:\n          case ADD_PICTURE_FAIL:\n          case GET_PICTURES_FAIL:\n               return {\n                    ...state,\n                    error: action.payload,\n                    isLoading: false,\n               };\n          default:\n               return state;\n     }\n}\n","import {\n     GET_PROMPTS_SUCCESS,\n     GET_PROMPTS_FAIL,\n     ADD_PROMPT_SUCCESS,\n     ADD_PROMPT_FAIL,\n     DELETE_PROMPT_SUCCESS,\n     DELETE_PROMPT_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     prompts: [],\n     prompt: {},\n     album: null,\n     isLoading: true,\n     error: {},\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case DELETE_PROMPT_SUCCESS:\n          case ADD_PROMPT_SUCCESS:\n          case GET_PROMPTS_SUCCESS:\n               return {\n                    ...state,\n                    prompts: action.payload,\n                    album: action.payload.album,\n                    isLoading: false,\n               };\n          case DELETE_PROMPT_FAIL:\n          case ADD_PROMPT_FAIL:\n          case GET_PROMPTS_FAIL:\n               return {\n                    ...state,\n                    error: action.payload,\n                    isLoading: false,\n               };\n          default:\n               return state;\n     }\n}\n","// this is the Root reducer\nimport { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport alertReducer from './alertReducer';\nimport albumReducer from './albumReducer';\nimport pictureReducer from './pictureReducer';\nimport promptReducer from './promptReducer';\n\nexport default combineReducers({\n     alert: alertReducer,\n     album: albumReducer,\n     auth: authReducer,\n     picture: pictureReducer,\n     prompt: promptReducer,\n});\n","// entry point to our redux store\n// holds the whole state tree of your application\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/';\n\n// const initialState = {};\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\nconst store = createStore(\n     rootReducer,\n     /* preloadedState, */ composeEnhancers(\n          applyMiddleware(...middleware),\n          window.__REDUX_DEVTOOLS_EXTENSION__ &&\n               window.__REDUX_DEVTOOLS_EXTENSION__()\n     )\n);\n\n// store.dispatch\n\n// connectRouter(history)\n// manipulate router history in\nexport default store;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\n\nimport './CSS/reset.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Welcome from './pages/Welcome';\nimport Dashboard from './pages/Dashboard';\nimport AccountSettings from './pages/AccountSettings';\nimport Album from './pages/Album';\nimport AppNavbar from './components/Layout/AppNavbar/index';\nimport PrivateRoute from './components/Auth/PrivateRoute';\nimport PageNotFound from './pages/PageNotFound';\nimport Wrapper from './components/Layout/Wrapper';\n\nimport './App.css';\n\n// import global header\nimport setAuthToken from './utils/setAuthToken';\n\n// Connects React to Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { loadUser } from './actions/authActions';\n\nif (localStorage.token) {\n     setAuthToken(localStorage.token);\n}\n\nconst App = () => {\n     // this will be a constant loop without []\n     // basically like a componentDidMount with the []\n     // tells react that your effect doesn't depend on any values from props/state therefore it never needs to re-run\n     useEffect(() => {\n          store.dispatch(loadUser());\n     }, []);\n\n     return (\n          <Provider store={store}>\n               <AppNavbar />\n               <Wrapper>\n                    <Helmet>\n                         <style>{'body {background-color: #252525;}'}</style>\n                    </Helmet>\n\n                    <Router>\n                         <Switch>\n                              <Route exact path='/' component={Welcome} />\n                              <PrivateRoute\n                                   exact\n                                   path='/dashboard'\n                                   component={Dashboard}\n                              />\n                              <PrivateRoute\n                                   exact\n                                   path='/accountSettings'\n                                   component={AccountSettings}\n                              />\n                              <Route\n                                   exact\n                                   path='/album/:id'\n                                   component={Album}\n                              />\n                              <Route component={PageNotFound} />\n                         </Switch>\n                    </Router>\n               </Wrapper>\n          </Provider>\n     );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n     <React.StrictMode>\n          <App />\n     </React.StrictMode>,\n     document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.e6373936.png\";"],"sourceRoot":""}