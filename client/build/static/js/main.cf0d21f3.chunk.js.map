{"version":3,"sources":["actions/alertActions.js","actions/types.js","utils/setAuthToken.js","actions/authActions.js","components/Auth/LoginForm/index.js","components/Auth/RegistrationForm/index.js","components/Layout/FormContainer/index.js","components/Layout/WelcomeShowcase/index.js","pages/Welcome.js","components/Layout/PageTitle/index.js","actions/albumActions.js","components/Album/AlbumList/index.js","components/Buttons/SubmitBtn/index.js","components/Layout/AlertDiv/index.js","components/Album/AddAlbumForm/index.js","components/Album/AddAlbumModal/index.js","components/Buttons/ModalButton/index.js","pages/Dashboard.js","components/Settings/ChangePasswordForm/index.js","components/Settings/DeleteUser/index.js","components/Settings/AlbumPassword/index.js","components/Settings/AlbumSettings/index.js","pages/AccountSettings.js","actions/pictureActions.js","components/Picture/AddPictureForm/index.js","components/Picture/AddPictureModal/index.js","actions/promptActions.js","components/Prompt/AddPromptForm/index.js","components/Prompt/AddPromptModal/index.js","components/Picture/MixedPostPicture/index.js","components/Prompt/MixedPostPrompt/index.js","components/Picture/CarouselPicture/index.js","components/Prompt/CarouselPrompt/index.js","pages/Album.js","components/Layout/AppNavbar/index.js","components/Auth/PrivateRoute/index.js","pages/PageNotFound.js","components/Layout/Wrapper/index.js","reducers/authReducer.js","reducers/alertReducer.js","reducers/albumReducer.js","reducers/pictureReducer.js","reducers/promptReducer.js","reducers/index.js","store.js","App.js","index.js","img/logo.png"],"names":["setAlert","msg","alertType","dispatch","id","uuid","type","payload","setTimeout","setAuthToken","token","axios","defaults","headers","common","loadUser","a","localStorage","get","res","data","connect","state","isAuth","auth","isAuthenticated","login","email","password","config","body","JSON","stringify","post","errors","response","forEach","error","props","useState","formData","setFormData","onChange","event","target","name","value","onSubmit","preventDefault","err","console","to","Form","className","FormGroup","htmlFor","required","Button","register","firstName","lastName","password2","Row","Col","md","FormContainer","formType","closeBtn","WelcomeShowcase","src","isLoading","formDivIndex","setFormDivIndex","setFormType","formDivOpen","log","getAttribute","formDivs","style","div","display","transitions","useTransition","p","from","opacity","transform","overflowx","enter","leave","icon","color","size","onClick","Container","map","item","key","FormDiv","PageTitle","children","getAllAlbums","status","text","getAlbum","album_id","posts","pictures","picture","push","prompts","prompt","sort","b","dateUploaded","length","i","albums","album","useEffect","albumLength","albumLoading","_id","CardBody","CardText","title","CardTitle","format","date","SubmitButton","marginBottom","alerts","alert","Alert","addNewAlbum","passwordRequired","toggle","setPasswordRequired","form","check","Label","Input","isChecked","AddAlbumModal","Modal","isOpen","ModalHeader","close","ModalBody","ModalButton","action","AddAlbumForm","propTypes","PropTypes","bool","isRequired","object","fluid","oneOfType","string","addIcon","modal","setModal","user","padding","changePw","oldPassword","newPassword","newPassword2","put","deleteAccount","window","confirm","delete","albumPasswordChange","setNewPassword","onPasswordSubmit","defaultChecked","FormText","deleteAlbum","albumNameChange","newTitle","deleteClick","activeTab","setActiveTab","tab","deleteId","passwordId","setNewTitle","onAlbumTitleChange","submitAlbumTitle","Card","xs","Nav","vertical","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","tabs","getPictures","addNewPicture","mode","caption","setCaption","uploadedBy","setUploadedBy","dateRecorded","setDateRecorded","image","setImage","pathArray","location","pathname","split","albumId","FormData","append","encType","files","AddPictureModal","getPrompts","addNewPrompt","AddPromptModal","MixedPostPicture","data-id","CardImg","alt","MixedPostPrompt","CarouselPicture","CardSubtitle","CarouselPrompt","deletePicture","picture_id","deletePrompt","prompt_id","albumAuth","promptModal","setPromptModal","photoModal","setPhotoModal","carouselModal","setCarouselModal","photoToggle","promptToggle","carouselToggle","activeIndex","setActiveIndex","currentPost","setCurrentPost","next","nextIndex","previous","setPassword","validAlbum","authorized","index","centered","Carousel","CarouselItem","ModalFooter","CarouselControl","direction","directionText","onClickHandler","logout","loggedInLinks","href","loading","Navbar","NavbarBrand","logo","Component","component","rest","render","Wrapper","initialState","getItem","combineReducers","filter","setItem","removeItem","middleware","thunk","composeEnhancers","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","compose","store","createStore","rootReducer","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","App","Helmet","exact","path","Welcome","Dashboard","AccountSettings","Album","PageNotFound","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cf0d21f3.chunk.js","sourcesContent":["import { SET_ALERT, REMOVE_ALERT } from './types';\nimport { v4 as uuid } from 'uuid';\n\nexport const setAlert = (msg, alertType) => (dispatch) => {\n     const id = uuid();\n     dispatch({\n          type: SET_ALERT,\n          payload: { msg, alertType, id },\n     });\n\n     setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), 4000);\n};\n","export const USER_LOADING = 'USER_LOADING';\nexport const USER_LOADED = 'USER_LOADED';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\nexport const DELETE_USER_FAIL = 'DELETE_USER_FAIL';\nexport const CHANGE_PW_SUCCESS = 'CHANGE_PW_SUCCESS';\nexport const CHANGE_PW_FAIL = 'CHANGE_PW_FAIL';\n\nexport const SET_ALERT = 'SET_ALERT';\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\n\nexport const GET_ALBUMS_SUCCESS = 'GET_ALBUMS_SUCCESS';\nexport const GET_ALBUMS_FAIL = 'GET_ALBUMS_FAIL';\nexport const GET_ALBUM_SUCCESS = 'GET_ALBUM_SUCCESS';\nexport const GET_ALBUM_FAIL = 'GET_ALBUM_FAIL';\nexport const ALBUM_AUTH_SUCCESS = 'ALBUM_AUTH_SUCCESS';\nexport const ALBUM_AUTH_FAIL = 'ALBUM_AUTH_FAIL';\nexport const ADD_ALBUM_SUCCESS = 'ADD_ALBUM_SUCCESS';\nexport const ADD_ALBUM_FAIL = 'ADD_ALBUM_FAIL';\nexport const DELETE_ALBUM_SUCCESS = 'DELETE_ALBUM_SUCCESS';\nexport const DELETE_ALBUM_FAIL = 'DELETE_ALBUM_FAIL';\nexport const CHANGE_ALBUM_NAME_SUCCESS = 'CHANGE_ALBUM_NAME_SUCCESS';\nexport const CHANGE_ALBUM_NAME_FAIL = 'CHANGE_ALBUM_NAME_FAIL';\nexport const CHANGE_ALBUM_PW_SUCCESS = 'CHANGE_ALBUM_PW_SUCCESS';\nexport const CHANGE_ALBUM_PW_FAIL = 'CHANGE_ALBUM_PW_FAIL';\n\nexport const GET_PICTURES_SUCCESS = 'GET_PICTURES_SUCCESS';\nexport const GET_PICTURES_FAIL = 'GET_PICTURES_FAIL';\nexport const VIEW_PICTURE_SUCCESS = 'VIEW_PICTURE_SUCCESS';\nexport const VIEW_PICTURE_FAIL = 'VIEW_PICTURE_FAIL';\nexport const ADD_PICTURE_SUCCESS = 'ADD_PICTURE_SUCCESS';\nexport const ADD_PICTURE_FAIL = 'ADD_PICTURE_FAIL';\nexport const DELETE_PICTURE_SUCCESS = 'DELETE_PICTURE_SUCCESS';\nexport const DELETE_PICTURE_FAIL = 'DELETE_PICTURE_FAIL';\n\nexport const GET_PROMPTS_SUCCESS = 'GET_PROMPTS_SUCCESS';\nexport const GET_PROMPTS_FAIL = 'GET_PROMPTS_FAIL';\nexport const VIEW_PROMPT_SUCCESS = 'VIEW_PROMPT_SUCCESS';\nexport const VIEW_PROMPT_FAIL = 'VIEW_PROMPT_FAIL';\nexport const ADD_PROMPT_SUCCESS = 'ADD_PROMPT_SUCCESS';\nexport const ADD_PROMPT_FAIL = 'ADD_PROMPT_FAIL';\nexport const DELETE_PROMPT_SUCCESS = 'DELETE_PROMPT_SUCCESS';\nexport const DELETE_PROMPT_FAIL = 'DELETE_PROMPT_FAIL';\n","import axios from 'axios';\n\n// adding a global header\nconst setAuthToken = (token) => {\n     if (token) {\n          axios.defaults.headers.common['x-auth-token'] = token;\n     } else {\n          delete axios.defaults.headers.common['x-auth-token'];\n     }\n};\n\nexport default setAuthToken;\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport setAuthToken from '../utils/setAuthToken';\n\nimport {\n     REGISTER_SUCCESS,\n     REGISTER_FAIL,\n     AUTH_ERROR,\n     USER_LOADED,\n     LOGIN_SUCCESS,\n     LOGIN_FAIL,\n     LOGOUT_SUCCESS,\n     CHANGE_PW_SUCCESS,\n     CHANGE_PW_FAIL,\n     DELETE_USER_SUCCESS,\n     DELETE_USER_FAIL,\n} from './types';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n     if (localStorage.token) {\n          setAuthToken(localStorage.token);\n     }\n     try {\n          const res = await axios.get('/api/auth');\n          dispatch({\n               type: USER_LOADED,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: AUTH_ERROR,\n          });\n     }\n};\n\n// Register user\nexport const register = ({ firstName, lastName, email, password }) => async (\n     dispatch\n) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ firstName, lastName, email, password });\n     try {\n          const res = await axios.post('api/users', body, config);\n          dispatch({\n               type: REGISTER_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(loadUser());\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n          dispatch({\n               type: REGISTER_FAIL,\n          });\n     }\n};\n\n// Login User\nexport const login = ({ email, password }) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ email, password });\n     try {\n          const res = await axios.post('/api/auth', body, config);\n          dispatch({\n               type: LOGIN_SUCCESS,\n               payload: res.data,\n          });\n\n          dispatch(loadUser());\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n          dispatch({\n               type: LOGIN_FAIL,\n          });\n     }\n};\n\nexport const logout = () => (dispatch) => {\n     dispatch({\n          type: LOGOUT_SUCCESS,\n     });\n};\n\nexport const changePw = ({ oldPassword, newPassword, newPassword2 }) => async (\n     dispatch\n) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ oldPassword, newPassword, newPassword2 });\n     try {\n          const res = await axios.put('/api/auth/password', body, config);\n          dispatch({\n               type: CHANGE_PW_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(setAlert('Password has been successfully changed'));\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n          dispatch({\n               type: CHANGE_PW_FAIL,\n          });\n     }\n};\n\nexport const deleteAccount = () => async (dispatch) => {\n     if (\n          window.confirm(\n               'Are you sure you want to delete your account? This action cannot be undone and all albums and their contents will be permanently deleted'\n          )\n     ) {\n          try {\n               await axios.delete('/api/auth');\n               dispatch({\n                    type: DELETE_USER_SUCCESS,\n               });\n               dispatch(setAlert('Your account has been permanently deleted'));\n          } catch (err) {\n               const errors = err.response.data;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_USER_FAIL,\n               });\n          }\n     }\n};\n","import React, { useState } from 'react';\nimport { Button, Form, FormGroup } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../../actions/authActions';\nimport { Redirect } from 'react-router-dom';\n\nconst LoginForm = (props) => {\n     const [formData, setFormData] = useState({\n          // these are the default values\n          email: '',\n          password: '',\n     });\n\n     const { email, password } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          try {\n               props.login({ email, password });\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     // Redirect if logged in\n     if (props.isAuth) {\n          return <Redirect to='/dashboard' />;\n     }\n     return (\n          <Form className='form' onSubmit={(event) => onSubmit(event)}>\n               <FormGroup>\n                    <label htmlFor='emailInput'>Email</label>\n                    <input\n                         type='text'\n                         name='email'\n                         className='form-control'\n                         id='emailInput'\n                         onChange={(event) => onChange(event)}\n                         value={email}\n                         required\n                    />\n               </FormGroup>\n               <FormGroup>\n                    <label htmlFor='passwordInput'>Password</label>\n                    <input\n                         type='password'\n                         name='password'\n                         className='form-control'\n                         id='passwordInput'\n                         onChange={(event) => onChange(event)}\n                         value={password}\n                         required\n                    />\n               </FormGroup>\n               <Button type='submit' value='login' className='btn login-btn'>\n                    Login\n               </Button>\n          </Form>\n     );\n};\n\n// login is a prop\nLoginForm.propTypes = {\n     login: PropTypes.func.isRequired,\n     isAuth: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { login })(LoginForm);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setAlert } from '../../../actions/alertActions';\nimport { register } from '../../../actions/authActions';\nimport { Button, Form, FormGroup, Row, Col } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst RegistrationForm = ({ setAlert, register, isAuth }) => {\n     const [formData, setFormData] = useState({\n          // these are the default values\n          firstName: '',\n          lastName: '',\n          email: '',\n          password: '',\n          password2: '',\n     });\n\n     const { firstName, lastName, email, password, password2 } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          if (password !== password2) {\n               // alert type is daaaanger\n               // have to export { setAlert } down below in order to use it here (available within props)\n               setAlert('Passwords do not match', 'danger');\n          } else {\n               try {\n                    register({ firstName, lastName, email, password });\n               } catch (err) {\n                    console.error(err.response.data);\n               }\n          }\n     };\n\n     if (isAuth) {\n          return <Redirect to='/dashboard' />;\n     }\n\n     return (\n          <Form className='form' onSubmit={(event) => onSubmit(event)}>\n               <Row>\n                    <Col md={6}>\n                         <FormGroup>\n                              <label htmlFor='fNameInput'>First Name</label>\n                              <input\n                                   type='text'\n                                   name='firstName'\n                                   className='form-control'\n                                   id='firstNameInput'\n                                   onChange={(event) => onChange(event)}\n                                   value={firstName}\n                                   // required\n                              />\n                         </FormGroup>\n                    </Col>\n                    <Col md={6}>\n                         <FormGroup>\n                              <label htmlFor='lNameInput'>Last Name</label>\n                              <input\n                                   type='text'\n                                   name='lastName'\n                                   className='form-control'\n                                   id='lastNameInput'\n                                   onChange={(event) => onChange(event)}\n                                   value={lastName}\n                                   // required\n                              />\n                         </FormGroup>\n                    </Col>\n               </Row>\n               <Row>\n                    <Col md={12}>\n                         <FormGroup>\n                              <label htmlFor='emailInput'>Email</label>\n                              <input\n                                   type='text'\n                                   name='email'\n                                   className='form-control'\n                                   id='emailInput'\n                                   onChange={(event) => onChange(event)}\n                                   value={email}\n                                   // required\n                              />\n                         </FormGroup>\n                    </Col>\n               </Row>\n               <Row>\n                    <Col md={6}>\n                         <FormGroup>\n                              <label htmlFor='newPasswordInput'>Password</label>\n                              <input\n                                   type='password'\n                                   name='password'\n                                   className='form-control'\n                                   id='newPasswordInput'\n                                   onChange={(event) => onChange(event)}\n                                   value={password}\n                                   // minLength='6'\n                                   // required\n                              />\n                         </FormGroup>\n                    </Col>\n                    <Col md={6}>\n                         <FormGroup>\n                              <label htmlFor='newPasswordInput'>\n                                   Confirm Password\n                              </label>\n                              <input\n                                   type='password'\n                                   name='password2'\n                                   className='form-control'\n                                   id='newPasswordInput2'\n                                   onChange={(event) => onChange(event)}\n                                   value={password2}\n                                   // minLength='6'\n                                   // required\n                              />\n                         </FormGroup>\n                    </Col>\n               </Row>\n               <Button\n                    type='submit'\n                    value='register'\n                    className='btn'\n                    id='register-btn'\n               >\n                    Register\n               </Button>\n          </Form>\n     );\n};\n\nRegistrationForm.propTypes = {\n     setAlert: PropTypes.func.isRequired,\n     register: PropTypes.func.isRequired,\n     isAuth: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\n// have to export connect and pass in any actions\n// this allows us to access props.setAlert\nexport default connect(mapStateToProps, { setAlert, register })(\n     RegistrationForm\n);\n","import React, { Fragment } from 'react';\nimport LoginForm from '../../Auth/LoginForm';\nimport RegistrationForm from '../../Auth/RegistrationForm';\n\nconst FormContainer = (props) => {\n     return (\n          <div>\n               {props.formType === 'login' ? (\n                    <Fragment>\n                         {/* <div id='logInForm'>\n                              <h1>Welcome back</h1>\n                              <LoginForm />\n                         </div> */}\n                         <div id='logInTriangle'>\n                              <h1>Welcome back {props.closeBtn}</h1>\n                              <LoginForm />\n                         </div>\n                    </Fragment>\n               ) : (\n                    <Fragment>\n                         <div id='registerTriangle'>\n                              <h1>Welcome! {props.closeBtn}</h1>\n                              <RegistrationForm />\n                         </div>\n                    </Fragment>\n               )}\n          </div>\n     );\n};\n\nexport default FormContainer;\n","import React from 'react';\nimport { Row } from 'reactstrap';\n\nfunction WelcomeShowcase() {\n     return (\n          <div id='showcase'>\n               <div className='movingArea'>\n                    {/* First set */}\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1593046584198-ed785e8bf3a6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Saying goodbye to Emilio\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1513492702219-923ec8c62a2f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Your first steps</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>My day</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1592106680408-e7e63efbc7ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Disney 2016\n                              {/* <div className='aboutText'>\n                                             Post photos and write your own\n                                             memories\n                                        </div> */}\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/flagged/photo-1576066196482-347ca427d0f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1593630459615-6ab2aa81a6ce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Road trip songs</div>\n                         <div className='box prompt'>Your first solid food</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1507946116609-bfed19728fdf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>\n                              What we almost named you\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1536825919521-ab78da56193b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              What we can't stop listening to\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1551197600-d3782114566e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1513862448120-a41616062133?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Postpartum moments that made me cry\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1588410670460-cdab54625253?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Indy's first walk</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Your favorite food</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1547226846-000337daf073?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>What I'm learning</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1575404078738-d2f15b89d320?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Bringing Heddy home</div>\n                         <div className='box prompt'>Your first words</div>\n\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1458546450666-ebb1e605853f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>The proposal</div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1529424601215-d2a3daf193ff?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Our first dance</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1587327650077-76b67918ddeb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Your birth - grandma's perspective\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Foods of today</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1453745541039-d804ab0ff1ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Your favorite toy</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1512746804203-e53e69406f93?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Our first date</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1562832823-f277927d6f2c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1557469778-0b3269a1cc7a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Your first day of school\n                         </div>\n                    </Row>\n\n                    {/* STOOOOOP */}\n\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1593046584198-ed785e8bf3a6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Saying goodbye to Emilio\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1513492702219-923ec8c62a2f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Your first steps</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>My day</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1592106680408-e7e63efbc7ba?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Disney 2016</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/flagged/photo-1576066196482-347ca427d0f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1593630459615-6ab2aa81a6ce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Road trip songs</div>\n                         <div className='box prompt'>Your first solid food</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1507946116609-bfed19728fdf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>\n                              What we almost named you\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1536825919521-ab78da56193b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              What we can't stop listening to\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1551197600-d3782114566e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1513862448120-a41616062133?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Postpartum moments that made me cry\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1588410670460-cdab54625253?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Indy's first walk</div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Your favorite food</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1547226846-000337daf073?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>What I'm learning</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1575404078738-d2f15b89d320?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Bringing Heddy home</div>\n                         <div className='box prompt'>Your first words</div>\n\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1458546450666-ebb1e605853f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>The proposal</div>\n                    </Row>\n                    <Row>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1529424601215-d2a3daf193ff?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Our first dance</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1587327650077-76b67918ddeb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Your birth - grandma's perspective\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Foods of today</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1453745541039-d804ab0ff1ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>Your favorite toy</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1512746804203-e53e69406f93?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                    </Row>\n                    <Row>\n                         <div className='box prompt'>Our first date</div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1562832823-f277927d6f2c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box image'>\n                              <img src='https://images.unsplash.com/photo-1557469778-0b3269a1cc7a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60' />\n                         </div>\n                         <div className='box prompt'>\n                              Your first day of school\n                         </div>\n                    </Row>\n               </div>\n          </div>\n     );\n}\n\nexport default WelcomeShowcase;\n","import React, { useState, useCallback } from 'react';\nimport { render } from 'react-dom';\nimport { Container, Row } from 'reactstrap';\nimport FormContainer from '../components/Layout/FormContainer';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport MaterialIcon from 'material-icons-react';\nimport { useTransition, animated } from 'react-spring';\nimport WelcomeShowcase from '../components/Layout/WelcomeShowcase';\n\nconst Welcome = ({ isAuth, isLoading }) => {\n     const [formDivIndex, setFormDivIndex] = useState(0);\n     const [formType, setFormType] = useState('');\n\n     const formDivClose = (event) => {\n          setFormDivIndex(0);\n          console.log('close');\n     };\n\n     const formDivOpen = (event) => {\n          setFormDivIndex(1);\n          console.log('open');\n          setFormType(event.target.getAttribute('type'));\n     };\n\n     const formDivs = [\n          ({ style }) => (\n               <animated.div\n                    style={{ ...style, display: 'none' }}\n                    id='formContainer'\n               >\n                    <div>You should never see this</div>\n               </animated.div>\n          ),\n          ({ style }) => (\n               <animated.div\n                    style={{ ...style, display: 'inline-block' }}\n                    id='formContainer'\n               >\n                    <FormContainer formType={formType} closeBtn={closeBtn} />\n               </animated.div>\n          ),\n     ];\n\n     const transitions = useTransition(formDivIndex, (p) => p, {\n          from: {\n               opacity: 0,\n               transform: 'translate3d(10vw,0vw,0)',\n               overflowx: 'hidden',\n          },\n          enter: {\n               opacity: 1,\n               transform: 'translate3d(0%,0vw,0)',\n          },\n          leave: {\n               opacity: 0,\n               transform: 'translate3d(10vw,0vw,0)',\n               overflowx: 'hidden',\n          },\n     });\n\n     const closeBtn = (\n          <MaterialIcon\n               icon='arrow_forward'\n               color='white'\n               size='large'\n               id='authArrowCloseBtn'\n               onClick={formDivClose}\n          />\n     );\n\n     {\n          return isLoading || !isAuth ? (\n               <Container id='welcomePage'>\n                    <div className='left'></div>\n                    <div className='leftTriangle'></div>\n                    <div id='mainText'>\n                         <h1>Memories worth sharing</h1>\n                         <h1>Privacy worth keeping</h1>\n                    </div>\n                    <div id='aboutText'>\n                         Post photos and write your own memories,\n                         <br />\n                         easily collaborate with friends and family,\n                         <br />\n                         and protect your albums with a password\n                         <br />\n                    </div>\n                    <div id='signInSquare'>\n                         <p id='signInText'>\n                              New user?{' '}\n                              <span\n                                   onClick={formDivOpen}\n                                   type='register'\n                                   className='authLink'\n                              >\n                                   Register\n                              </span>{' '}\n                              <br />\n                              Returning user?{' '}\n                              <span\n                                   onClick={formDivOpen}\n                                   type='login'\n                                   className='authLink'\n                              >\n                                   Login\n                              </span>\n                         </p>\n                    </div>\n                    <div id='signInTriangle'></div>\n                    {transitions.map(({ item, props, key }) => {\n                         const FormDiv = formDivs[item];\n                         return <FormDiv key={key} style={props} />;\n                    })}\n                    <WelcomeShowcase />\n               </Container>\n          ) : (\n               <Redirect to='/dashboard' />\n          );\n     }\n};\n\nWelcome.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     isLoading: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     isLoading: state.auth.isLoading,\n});\n\nexport default connect(mapStateToProps)(Welcome);\n","import React from 'react';\nimport './style.css';\n\nconst PageTitle = (props) => {\n     return <h1 className='pageTitle'>{props.children}</h1>;\n};\n\nexport default PageTitle;\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport {\n     ADD_ALBUM_SUCCESS,\n     ADD_ALBUM_FAIL,\n     GET_ALBUMS_SUCCESS,\n     GET_ALBUMS_FAIL,\n     GET_ALBUM_SUCCESS,\n     GET_ALBUM_FAIL,\n     DELETE_ALBUM_SUCCESS,\n     DELETE_ALBUM_FAIL,\n     ALBUM_AUTH_SUCCESS,\n     ALBUM_AUTH_FAIL,\n     CHANGE_ALBUM_NAME_SUCCESS,\n     CHANGE_ALBUM_NAME_FAIL,\n     CHANGE_ALBUM_PW_SUCCESS,\n     CHANGE_ALBUM_PW_FAIL,\n} from './types';\n\nexport const getAllAlbums = () => async (dispatch) => {\n     try {\n          // knows which album to load from the token sent that contains the user id\n          const res = await axios.get('api/albums/');\n          dispatch({\n               type: GET_ALBUMS_SUCCESS,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: GET_ALBUMS_FAIL,\n               payload: {\n                    msg: err.response.status.text,\n                    status: err.response.status,\n               },\n          });\n     }\n};\n\nexport const addNewAlbum = ({ title, passwordRequired, password }) => async (\n     dispatch\n) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     if (!passwordRequired) {\n          password = '';\n     }\n     const body = JSON.stringify({ title, passwordRequired, password });\n     console.log(body);\n     try {\n          const res = await axios.post('/api/albums/', body, config);\n          dispatch({\n               type: ADD_ALBUM_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAllAlbums());\n     } catch (err) {\n          const errors = err.response.data.errors;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: ADD_ALBUM_FAIL,\n          });\n     }\n};\n\nexport const getAlbum = (album_id) => async (dispatch) => {\n     try {\n          const res = await axios.get(`/api/albums/${album_id}`);\n          let posts = [];\n          res.data[0].pictures.map((picture) => posts.push(picture));\n          res.data[0].prompts.map((prompt) => posts.push(prompt));\n          posts.sort((a, b) => (a.dateUploaded < b.dateUploaded ? 1 : -1));\n          dispatch({\n               type: GET_ALBUM_SUCCESS,\n               payload: { posts: posts, data: res.data },\n          });\n     } catch (err) {\n          const errors = err.response.data;\n          console.log(errors);\n          if (errors.length > 0) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n                    console.log(errors[i].msg);\n                    console.log('hello');\n               }\n               // return <Redirect to='/pagenotfound' />;\n          }\n          dispatch({\n               type: GET_ALBUM_FAIL,\n          });\n     }\n};\n\nexport const albumAuth = ({ albumId, password }) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ albumId, password });\n\n     try {\n          const res = await axios.post(\n               `/api/albums/private/${albumId}`,\n               body,\n               config\n          );\n          dispatch({\n               type: ALBUM_AUTH_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAlbum(albumId));\n          console.log(res.data);\n     } catch (err) {\n          dispatch({\n               type: ALBUM_AUTH_FAIL,\n          });\n          dispatch(getAlbum(albumId));\n          const errors = err.response.data.errors;\n          if (errors) {\n               errors.forEach((error) =>\n                    dispatch(setAlert(error.msg, 'danger'))\n               );\n          }\n     }\n};\n\nexport const deleteAlbum = (id) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     if (\n          window.confirm(\n               'Are you sure you want to delete this album? This action cannot be undone and all posts within the album will be permanently deleted'\n          )\n     ) {\n          try {\n               const res = await axios.delete(`/api/albums/${id}`, config);\n               dispatch({\n                    type: DELETE_ALBUM_SUCCESS,\n                    payload: res.data,\n               });\n               dispatch(getAllAlbums());\n               dispatch(setAlert('This album has been permanentely deleted'));\n          } catch (err) {\n               const errors = err.response.data;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_ALBUM_FAIL,\n               });\n          }\n     }\n};\n\nexport const albumNameChange = (album_id, { newTitle }) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n\n     const body = JSON.stringify({ newTitle });\n     try {\n          await axios.put(`/api/albums/${album_id}`, body, config);\n          dispatch({\n               type: CHANGE_ALBUM_NAME_SUCCESS,\n          });\n          dispatch(getAllAlbums());\n          dispatch(setAlert('Album name has been successfully updated'));\n     } catch (err) {\n          const errors = err.response.data;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: CHANGE_ALBUM_NAME_FAIL,\n          });\n     }\n};\n\nexport const albumPasswordChange = (\n     album_id,\n     { newPassword, passwordRequired }\n) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n          },\n     };\n     const body = JSON.stringify({ newPassword, passwordRequired });\n     try {\n          await axios.put(`/api/albums/password/${album_id}`, body, config);\n          dispatch({\n               type: CHANGE_ALBUM_PW_SUCCESS,\n          });\n          dispatch(getAllAlbums());\n          dispatch(\n               setAlert(\n                    'Album password settings have been successfully updated'\n               )\n          );\n     } catch (err) {\n          const errors = err.response.data;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: CHANGE_ALBUM_PW_FAIL,\n          });\n     }\n};\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport DeleteBtn from '../../Buttons/DeleteBtn';\nimport {\n     // Card,\n     // Row,\n     // CardFooter,\n     CardBody,\n     CardText,\n     CardTitle,\n} from 'reactstrap';\nimport { getAllAlbums } from '../../../actions/albumActions';\n\nimport './style.css';\n\nconst AlbumList = ({ albums, getAllAlbums }) => {\n     // this\n     useEffect(() => {\n          getAllAlbums();\n     }, [getAllAlbums]);\n\n     let albumLength = albums.albums.length;\n     let albumLoading = albums.isLoading;\n\n     // const deleteClick = async (event) => {\n     //      event.preventDefault();\n     //      const album_id = event.target.getAttribute('data-id');\n     //      console.log(album_id);\n     //      deleteAlbum(album_id);\n     // };\n\n     return albumLength === 0 ? (\n          <Fragment>No albums added</Fragment>\n     ) : !albumLoading ? (\n          albums.albums.map((album) => (\n               <Fragment key={album._id}>\n                    <div className='albumList'>\n                         <CardBody>\n                              <CardText>\n                                   <Link to={`/album/${album._id}`}>\n                                        {album.title}\n                                   </Link>\n                              </CardText>\n                              <Link\n                                   to={`/album/${album._id}`}\n                                   key={album._id}\n                                   className='overlay'\n                              >\n                                   <CardTitle className='text'>\n                                        Created on:{' '}\n                                        <Moment\n                                             format='MM/DD/YYYY'\n                                             date={album.date}\n                                        ></Moment>\n                                   </CardTitle>\n                              </Link>\n                         </CardBody>\n                         {/* <CardFooter\n                              className='albumListBelow'\n                              // onClick={deleteClick}\n                              id={album._id}\n                         >\n                              <DeleteBtn\n                                   id={album._id}\n                                   deleteClick={deleteClick}\n                              />\n                         </CardFooter> */}\n                    </div>\n               </Fragment>\n          ))\n     ) : (\n          <h1>Loading your albums</h1>\n     );\n};\n\nAlbumList.propTypes = {\n     getAllAlbums: PropTypes.func.isRequired,\n     auth: PropTypes.object.isRequired,\n     albums: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n     albums: state.album,\n});\n\nexport default connect(mapStateToProps, { getAllAlbums })(AlbumList);\n","import React from 'react';\nimport { Button } from 'reactstrap';\n\nconst SubmitButton = (props) => {\n     return (\n          <Button color='dark' style={{ marginBottom: '2rem' }}>\n               Submit\n          </Button>\n     );\n};\n\nexport default SubmitButton;\n","import React from 'react';\nimport { Alert } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst AlertDiv = ({ alerts }) =>\n     alerts !== null &&\n     alerts.length > 0 &&\n     alerts.map((alert) => (\n          <div key={alert.key}>\n               <Alert color={alert.alertType} className='alert'>\n                    {alert.msg}\n               </Alert>\n          </div>\n     ));\n\nAlertDiv.propTypes = {\n     alerts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     alerts: state.alert,\n});\n\nexport default connect(mapStateToProps)(AlertDiv);\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../../actions/alertActions';\nimport { addNewAlbum } from '../../../actions/albumActions';\nimport { Form, FormGroup, Label, Input, Col, Row } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport SubmitButton from '../../Buttons/SubmitBtn';\nimport AlertDiv from '../../Layout/AlertDiv';\n\nconst AddAlbumForm = ({ setAlert, addNewAlbum, toggle, isAuth }) => {\n     // using the UseState hook from react\n     const [formData, setFormData] = useState({\n          title: '',\n          password: '',\n     });\n\n     const [passwordRequired, setPasswordRequired] = useState(false);\n\n     const { title, password } = formData;\n\n     // handler to update the data\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const handleCheckboxChange = () => {\n          setPasswordRequired(!passwordRequired);\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          if (title === '') {\n               setAlert('All albums need a title', 'danger');\n          } else if (passwordRequired && password === '') {\n               setAlert(\n                    'Please include a password or uncheck the box',\n                    'danger'\n               );\n          } else {\n               try {\n                    addNewAlbum({ title, passwordRequired, password });\n                    setFormData({ ...formData, title: '' });\n                    await setPasswordRequired(false);\n                    toggle();\n               } catch (err) {}\n          }\n     };\n\n     if (!isAuth) {\n          return <Redirect to='/' />;\n     }\n\n     return (\n          <Fragment>\n               <AlertDiv />\n               <Form className='form' onSubmit={onSubmit}>\n                    <Row form>\n                         <Col md={12}>\n                              <FormGroup>\n                                   <label htmlFor='title'>Album title</label>\n                                   <input\n                                        type='text'\n                                        name='title'\n                                        className='form-control'\n                                        onChange={onChange}\n                                        value={title}\n                                   />\n                              </FormGroup>\n                         </Col>\n                    </Row>\n                    <Row form>\n                         <Col md={6}>\n                              <FormGroup check className='mb-5 mt-3'>\n                                   <Label check>\n                                        <Input\n                                             type='checkbox'\n                                             name='addPassword'\n                                             // value={addPassword}\n                                             onChange={handleCheckboxChange}\n                                             isChecked={passwordRequired}\n                                        />\n                                        Add password to this album\n                                   </Label>\n                              </FormGroup>\n                         </Col>\n                         {passwordRequired ? (\n                              <Col md={6}>\n                                   <FormGroup>\n                                        <label htmlFor='password'>\n                                             Album password\n                                        </label>\n                                        <input\n                                             type='text'\n                                             name='password'\n                                             className='form-control'\n                                             onChange={onChange}\n                                             value={password}\n                                        />\n                                   </FormGroup>\n                              </Col>\n                         ) : null}\n                    </Row>\n                    <SubmitButton />\n               </Form>\n          </Fragment>\n     );\n};\n\nAddAlbumForm.propTypes = {\n     isAuth: PropTypes.bool,\n     setAlert: PropTypes.func.isRequired,\n     addNewAlbum: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, addNewAlbum })(\n     AddAlbumForm\n);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst AddAlbumModal = (props) => {\n     const closeBtn = (\n          <button className='close' onClick={props.toggle}>\n               &times;\n          </button>\n     );\n\n     return (\n          <div>\n               <Modal isOpen={props.isOpen} className='addModal'>\n                    <ModalHeader close={closeBtn}>Add a New Album</ModalHeader>\n                    <ModalBody>{props.children}</ModalBody>\n               </Modal>\n          </div>\n     );\n};\n\nexport default AddAlbumModal;\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport './style.css';\n\nconst ModalButton = (props) => {\n     return (\n          <Button\n               className='modalButton'\n               {...props}\n               onClick={props.onClick}\n               action={props.action}\n          >\n               {props.action}\n          </Button>\n     );\n};\n\nexport default ModalButton;\n","import React, { useState } from 'react';\nimport MaterialIcon from 'material-icons-react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Container, Row } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\n\nimport PageTitle from '../components/Layout/PageTitle';\nimport AlbumList from '../components/Album/AlbumList';\nimport AddAlbumForm from '../components/Album/AddAlbumForm';\nimport AddAlbumModal from '../components/Album/AddAlbumModal';\nimport ModalButton from '../components/Buttons/ModalButton';\nimport AlertDiv from '../components/Layout/AlertDiv';\nimport '../App.css';\n\nconst Dashboard = ({ isAuth, auth }) => {\n     const addIcon = <MaterialIcon icon='add' color='#252525' size='large' />;\n\n     const [modal, setModal] = useState(false);\n\n     const toggle = () => {\n          setModal(!modal);\n     };\n\n     return auth.isLoading ? (\n          <h1>Loading your memories</h1>\n     ) : !isAuth ? (\n          <Redirect to='/' />\n     ) : (\n          <>\n               <Container fluid={true}>\n                    <PageTitle>\n                         Welcome to your memory albums, {auth.user.firstName}{' '}\n                         {auth.user.lastName}\n                    </PageTitle>\n\n                    <AlertDiv />\n               </Container>\n               <Row>\n                    <AlbumList />\n               </Row>\n\n               <AddAlbumModal toggle={toggle} isOpen={modal}>\n                    <AddAlbumForm toggle={toggle} />\n               </AddAlbumModal>\n               <div className='buttonContainer'>\n                    <ModalButton\n                         className='albumButton modalButton'\n                         action={addIcon}\n                         onClick={toggle}\n                         style={{ padding: '15px' }}\n                    />\n               </div>\n          </>\n     );\n};\n\nAddAlbumForm.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     auth: PropTypes.object.isRequired,\n};\n\nContainer.propTypes = {\n     fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(Dashboard);\n","import React, { useState } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { changePw } from '../../../actions/authActions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport './style.css';\n\nconst ChangePasswordForm = (props) => {\n     const [formData, setFormData] = useState({\n          oldPassword: '',\n          newPassword: '',\n          newPassword2: '',\n     });\n     const { oldPassword, newPassword, newPassword2 } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          try {\n               props.changePw({ oldPassword, newPassword, newPassword2 });\n               setFormData({\n                    ...formData,\n                    oldPassword: '',\n                    newPassword: '',\n                    newPassword2: '',\n               });\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     if (!props.isAuth) {\n          return <Redirect to='/' />;\n     }\n\n     return (\n          <Form\n               className='form clearfix'\n               id='changePasswordForm'\n               onSubmit={onSubmit}\n          >\n               <FormGroup>\n                    <Label htmlFor='oldPassword'>Current password</Label>\n                    <Input\n                         type='password'\n                         id='oldPassword'\n                         name='oldPassword'\n                         className='form-control'\n                         value={oldPassword}\n                         onChange={onChange}\n                    />\n               </FormGroup>\n\n               <FormGroup>\n                    <Label htmlFor='newPassword'>New password</Label>\n                    <Input\n                         type='password'\n                         id='newPassword'\n                         name='newPassword'\n                         className='form-control'\n                         value={newPassword}\n                         onChange={onChange}\n                    />\n               </FormGroup>\n               <FormGroup>\n                    <Label htmlFor='newPassword2'>Confirm new password</Label>\n                    <Input\n                         type='password'\n                         id='newPassword2'\n                         name='newPassword2'\n                         className='form-control'\n                         value={newPassword2}\n                         onChange={onChange}\n                    />\n               </FormGroup>\n               <Button\n                    type='submit'\n                    value='changePw'\n                    className='btn'\n                    id='pw-submit-btn'\n               >\n                    Change Password\n               </Button>\n          </Form>\n     );\n};\n\nChangePasswordForm.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     changePw: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { changePw })(ChangePasswordForm);\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { deleteAccount } from '../../../actions/authActions';\n\nconst DeleteUser = ({ deleteAccount }) => {\n     const onClick = async () => {\n          try {\n               deleteAccount();\n               return <Redirect to='/' />;\n          } catch (err) {\n               console.error(err);\n          }\n     };\n     return (\n          <Button className='btn btn-danger' onClick={onClick}>\n               Delete Account\n          </Button>\n     );\n};\n\nDeleteUser.propTypes = {\n     deleteAccount: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { deleteAccount })(DeleteUser);\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setAlert } from '../../../actions/alertActions';\nimport { albumPasswordChange } from '../../../actions/albumActions';\nimport {\n     // Card,\n     // Col,\n     Row,\n     Form,\n     FormGroup,\n     Label,\n     Input,\n     FormText,\n     //  CardBody,\n     //  CardText,\n     // TabContent,\n     // TabPane,\n     // CardTitle,\n     Button,\n     // Nav,\n     // NavItem,\n     // NavLink,\n     //  Col,\n} from 'reactstrap';\n\nconst AlbumPassword = (props) => {\n     //  console.log('line 28');\n     //  console.log(props);\n     const [newPassword, setNewPassword] = useState('');\n\n     const onPasswordChange = (event) => {\n          setNewPassword(event.target.value);\n     };\n\n     const [passwordRequired, setPasswordRequired] = useState(\n          props.passwordRequired\n     );\n\n     const handleCheckboxChange = () => {\n          setPasswordRequired(!passwordRequired);\n     };\n\n     const onPasswordSubmit = async (event) => {\n          event.preventDefault();\n          if (\n               (passwordRequired && newPassword === '') ||\n               (!passwordRequired && !newPassword === '')\n          ) {\n               props.setAlert(\n                    'Please include a password or uncheck the box',\n                    'danger'\n               );\n          }\n          try {\n               const album_id = event.target.getAttribute('id');\n               await props.albumPasswordChange(album_id, {\n                    newPassword,\n                    passwordRequired,\n               });\n               setNewPassword('');\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     return (\n          <Form className='form' onSubmit={onPasswordSubmit} id={props.id}>\n               {/* <Row form> */}\n               {!props.passwordRequired ? (\n                    <p>No password currently required to view this album</p>\n               ) : (\n                    <p>Password is required to view this album</p>\n               )}\n               <FormGroup>\n                    <Label>\n                         <Input\n                              type='checkbox'\n                              name='newPassword'\n                              value={newPassword}\n                              onChange={handleCheckboxChange}\n                              defaultChecked={props.passwordRequired}\n                              isChecked={passwordRequired}\n                         />\n                         Require password\n                    </Label>\n               </FormGroup>\n\n               {passwordRequired ? (\n                    <FormGroup>\n                         <label htmlFor='newPassword'>\n                              {props.passwordRequired ? (\n                                   <span>Update password</span>\n                              ) : (\n                                   <span>Add a password</span>\n                              )}\n                         </label>\n                         <input\n                              type='text'\n                              name='newPassword'\n                              className='form-control'\n                              onChange={onPasswordChange}\n                              value={newPassword}\n                         />\n                    </FormGroup>\n               ) : null}\n\n               {/* </Row> */}\n               <Button>Save Changes</Button>\n               <FormText color='muted'>\n                    Submit form to save all changes\n               </FormText>\n          </Form>\n     );\n};\n\nAlbumPassword.propTypes = {\n     setAlert: PropTypes.func.isRequired,\n     albumPasswordChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, albumPasswordChange })(\n     AlbumPassword\n);\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SubmitButton from '../../Buttons/SubmitBtn';\n\nimport {\n     Card,\n     Col,\n     Row,\n     Form,\n     FormGroup,\n     Label,\n     Input,\n     TabContent,\n     TabPane,\n     CardTitle,\n     Button,\n     Nav,\n     NavItem,\n     NavLink,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport {\n     deleteAlbum,\n     getAllAlbums,\n     albumNameChange,\n} from '../../../actions/albumActions';\n\nimport './style.css';\nimport AlbumPassword from '../AlbumPassword';\n\nconst AlbumSettings = ({\n     albums,\n     getAllAlbums,\n     deleteAlbum,\n     albumNameChange,\n}) => {\n     useEffect(() => {\n          getAllAlbums();\n     }, [getAllAlbums]);\n\n     let albumLength = albums.albums.length;\n     let albumLoading = albums.isLoading;\n\n     const deleteClick = async (event) => {\n          event.preventDefault();\n          const album_id = event.target.getAttribute('id');\n          console.log(album_id);\n          await deleteAlbum(album_id);\n     };\n     const [activeTab, setActiveTab] = useState('delete');\n\n     const toggle = (tab) => {\n          if (activeTab !== tab) setActiveTab(tab);\n     };\n\n     const deleteId = (album_id) => {\n          return `delete${album_id}`;\n     };\n\n     const nameId = (album_id) => {\n          return `name${album_id}`;\n     };\n\n     const passwordId = (album_id) => {\n          return `password${album_id}`;\n     };\n\n     const [newTitle, setNewTitle] = useState('');\n\n     const onAlbumTitleChange = (event) => {\n          setNewTitle(event.target.value);\n     };\n\n     const submitAlbumTitle = async (event, album_id) => {\n          event.preventDefault();\n          try {\n               await albumNameChange(album_id, { newTitle });\n               setNewTitle('');\n          } catch (err) {\n               console.error(err);\n          }\n     };\n\n     return albumLength === 0 ? (\n          <Fragment>No albums added</Fragment>\n     ) : !albumLoading ? (\n          albums.albums.map((album) => (\n               <Fragment>\n                    <Fragment key={album._id}>\n                         <Card className='albumSettingsCard'>\n                              <CardTitle>{album.title}</CardTitle>\n                              <Row>\n                                   <Col xs='4'>\n                                        <Nav vertical>\n                                             <NavItem>\n                                                  <NavLink\n                                                       className={classnames({\n                                                            active:\n                                                                 activeTab ===\n                                                                 `name${album._id}`,\n                                                       })}\n                                                       onClick={() => {\n                                                            toggle(\n                                                                 `name${album._id}`\n                                                            );\n                                                       }}\n                                                  >\n                                                       Album Name\n                                                  </NavLink>\n                                             </NavItem>\n                                             <NavItem>\n                                                  <NavLink\n                                                       className={classnames({\n                                                            active:\n                                                                 activeTab ===\n                                                                 `password${album._id}`,\n                                                       })}\n                                                       onClick={() => {\n                                                            toggle(\n                                                                 `password${album._id}`\n                                                            );\n                                                       }}\n                                                  >\n                                                       Album Password\n                                                  </NavLink>\n                                             </NavItem>\n                                             <NavItem>\n                                                  <NavLink\n                                                       className={classnames({\n                                                            active:\n                                                                 activeTab ===\n                                                                 `delete${album._id}`,\n                                                       })}\n                                                       onClick={() => {\n                                                            toggle(\n                                                                 `delete${album._id}`\n                                                            );\n                                                       }}\n                                                  >\n                                                       Delete Album?\n                                                  </NavLink>\n                                             </NavItem>\n                                        </Nav>\n                                   </Col>\n                                   <Col xs='8'>\n                                        <TabContent activeTab={activeTab}>\n                                             <TabPane tabId={nameId(album._id)}>\n                                                  <Form\n                                                       className='form'\n                                                       onSubmit={(event) =>\n                                                            submitAlbumTitle(\n                                                                 event,\n                                                                 album._id\n                                                            )\n                                                       }\n                                                  >\n                                                       <FormGroup>\n                                                            <Label htmlFor='newTitle'>\n                                                                 New album title\n                                                            </Label>\n                                                            <Input\n                                                                 type='text'\n                                                                 name='newTitle'\n                                                                 value={\n                                                                      newTitle\n                                                                 }\n                                                                 onChange={\n                                                                      onAlbumTitleChange\n                                                                 }\n                                                            />\n                                                       </FormGroup>\n                                                       <SubmitButton />\n                                                  </Form>\n                                             </TabPane>\n                                             <TabPane\n                                                  tabId={passwordId(album._id)}\n                                             >\n                                                  <AlbumPassword\n                                                       id={album._id}\n                                                       passwordRequired={\n                                                            album.passwordRequired\n                                                       }\n                                                  />\n                                             </TabPane>\n                                             <TabPane\n                                                  tabId={deleteId(album._id)}\n                                             >\n                                                  <p>\n                                                       Deleting this album will\n                                                       permanently delete the\n                                                       album and all posts\n                                                       within this album. This\n                                                       action cannot be undone -\n                                                       click carefully!\n                                                  </p>\n                                                  <Button\n                                                       id={album._id}\n                                                       onClick={deleteClick}\n                                                       className='mx-auto'\n                                                  >\n                                                       Delete\n                                                  </Button>\n                                             </TabPane>\n                                        </TabContent>\n                                   </Col>\n                              </Row>\n                         </Card>\n                    </Fragment>\n               </Fragment>\n          ))\n     ) : (\n          <h1>Loading your albums</h1>\n     );\n};\n\nAlbumSettings.propTypes = {\n     getAllAlbums: PropTypes.func.isRequired,\n     deleteAlbum: PropTypes.func.isRequired,\n     albumNameChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n     albums: state.album,\n});\n\nexport default connect(mapStateToProps, {\n     getAllAlbums,\n     deleteAlbum,\n     albumNameChange,\n})(AlbumSettings);\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n     Container,\n     TabContent,\n     TabPane,\n     Nav,\n     NavItem,\n     NavLink,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport PageTitle from '../components/Layout/PageTitle';\nimport ChangePasswordForm from '../components/Settings/ChangePasswordForm';\nimport DeleteUser from '../components/Settings/DeleteUser';\nimport AlbumSettings from '../components/Settings/AlbumSettings';\nimport AlertDiv from '../components/Layout/AlertDiv';\nimport '../App.css';\nimport classnames from 'classnames';\n\nconst AccountSettings = ({ auth }) => {\n     const [activeTab, setActiveTab] = useState('1');\n     const toggle = (tab) => {\n          if (activeTab !== tab) setActiveTab(tab);\n     };\n     return auth.isLoading ? (\n          <h1>Loading</h1>\n     ) : (\n          <Fragment>\n               <Container fluid={true}>\n                    <PageTitle>Your Settings</PageTitle>\n               </Container>\n\n               <Fragment>\n                    <Nav tabs>\n                         <NavItem>\n                              <NavLink\n                                   className={classnames({\n                                        active: activeTab === '1',\n                                   })}\n                                   onClick={() => {\n                                        toggle('1');\n                                   }}\n                              >\n                                   Album Settings\n                              </NavLink>\n                         </NavItem>\n                         <NavItem>\n                              <NavLink\n                                   className={classnames({\n                                        active: activeTab === '2',\n                                   })}\n                                   onClick={() => {\n                                        toggle('2');\n                                   }}\n                              >\n                                   Account Settings\n                              </NavLink>\n                         </NavItem>\n                    </Nav>\n                    <TabContent activeTab={activeTab}>\n                         <TabPane tabId='1' id='albumSettings'>\n                              <h4 className='mt-3 mb-3'>Album Settings</h4>\n                              <AlertDiv />\n                              <AlbumSettings />\n                         </TabPane>\n                         <TabPane tabId='2' id='accountSettings'>\n                              <div className='center'>\n                                   <h4 className='mt-3 mb-3'>\n                                        Account Settings\n                                   </h4>\n                                   <AlertDiv />\n                                   <hr />\n                                   <h5 className='mt-3 mb-3'>\n                                        Update Account Password\n                                   </h5>\n\n                                   <ChangePasswordForm />\n                                   <hr />\n                                   <h5 className='mt-3 mb-3'>\n                                        Delete User Account\n                                   </h5>\n                                   <DeleteUser />\n                              </div>\n                         </TabPane>\n                    </TabContent>\n               </Fragment>\n          </Fragment>\n     );\n};\n\nAccountSettings.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     auth: PropTypes.object.isRequired,\n};\n\nContainer.propTypes = {\n     fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(AccountSettings);\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport {\n     GET_PICTURES_SUCCESS,\n     GET_PICTURES_FAIL,\n     ADD_PICTURE_SUCCESS,\n     ADD_PICTURE_FAIL,\n     DELETE_PICTURE_SUCCESS,\n     DELETE_PICTURE_FAIL,\n} from './types';\nimport { getAlbum } from './albumActions';\n\nexport const getPictures = (id) => async (dispatch) => {\n     try {\n          const res = await axios.get(`/api/pictures/album/${id}`);\n          dispatch({\n               type: GET_PICTURES_SUCCESS,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: GET_PICTURES_FAIL,\n               payload: {\n                    msg: err.response.status.text,\n                    status: err.response.status,\n               },\n          });\n     }\n};\n\nexport const addNewPicture = (album_id, formData) => async (dispatch) => {\n     const config = {\n          headers: {\n               // 'Content-Type': 'application/json',\n               'Content-Type': 'multipart/form-data',\n               // encType: 'multipart/form-data',\n               mode: 'no-cors',\n          },\n     };\n\n     try {\n          const res = await axios.post(\n               `/api/pictures/${album_id}`,\n               formData,\n               config\n          );\n\n          dispatch({\n               type: ADD_PICTURE_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAlbum(album_id));\n          dispatch(getPictures(album_id));\n     } catch (err) {\n          const errors = err.response;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: ADD_PICTURE_FAIL,\n          });\n     }\n};\n\nexport const deletePicture = (picture_id, album_id) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     if (\n          window.confirm(\n               'Are you sure you want to delete this picture? This action cannot be undone'\n          )\n     ) {\n          try {\n               const res = await axios.delete(\n                    `/api/pictures/${picture_id}`,\n                    config\n               );\n               dispatch({\n                    type: DELETE_PICTURE_SUCCESS,\n                    payload: res.data,\n               });\n               dispatch(getAlbum(album_id));\n               dispatch(getPictures(album_id));\n          } catch (err) {\n               const errors = err.response;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_PICTURE_FAIL,\n               });\n          }\n     }\n};\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../../actions/alertActions';\nimport { addNewPicture } from '../../../actions/pictureActions';\nimport { Form, FormGroup } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport AlertDiv from '../../Layout/AlertDiv';\nimport SubmitButton from '../../Buttons/SubmitBtn';\n\nconst AddPictureForm = ({ setAlert, addNewPicture, toggle }) => {\n     // using the UseState hook from react\n     const [caption, setCaption] = useState('');\n     const [uploadedBy, setUploadedBy] = useState('');\n     const [dateRecorded, setDateRecorded] = useState('');\n     const [image, setImage] = useState({});\n\n     const onCaptionChange = (event) => {\n          setCaption(event.target.value);\n     };\n\n     const onUploadedByChange = (event) => {\n          setUploadedBy(event.target.value);\n     };\n\n     const onDateRecordedChange = (event) => {\n          setDateRecorded(event.target.value);\n     };\n\n     const onDrop = (event) => {\n          setImage(event.target.files[0]);\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n\n          let pathArray = window.location.pathname.split('/');\n          let albumId = pathArray[pathArray.length - 1];\n          const formData = new FormData();\n\n          formData.append('caption', caption);\n          formData.append('uploadedBy', uploadedBy);\n          formData.append('dateRecorded', dateRecorded);\n          formData.append('image', image);\n\n          if (formData.get('image') === '[object Object]') {\n               setAlert('Picture memories must include an image', 'danger');\n          } else if (\n               caption === '' ||\n               uploadedBy === '' ||\n               dateRecorded === ''\n          ) {\n               setAlert(\n                    'Please fill out all fields to thoroughly document your memory!',\n                    'danger'\n               );\n          } else {\n               try {\n                    await addNewPicture(albumId, formData);\n                    setCaption('');\n                    setUploadedBy('');\n                    setDateRecorded('');\n                    setImage({});\n                    toggle();\n               } catch (err) {\n                    if (err.response.status === 500) {\n                         console.log('Server problem');\n                    } else {\n                         console.log(err.response.data.msg);\n                    }\n               }\n          }\n     };\n\n     return (\n          <Fragment>\n               <AlertDiv />\n               <Form\n                    className='form'\n                    encType='multipart/form-data'\n                    onSubmit={onSubmit}\n               >\n                    <FormGroup>\n                         <input type='file' name='image' onChange={onDrop} />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='caption'>Caption</label>\n                         <textarea\n                              name='caption'\n                              className='form-control'\n                              onChange={onCaptionChange}\n                              value={caption}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='uploadedBy'>Memory uploaded by:</label>\n                         <input\n                              type='text'\n                              name='uploadedBy'\n                              className='form-control'\n                              onChange={onUploadedByChange}\n                              value={uploadedBy}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='dateRecorded'>\n                              Date the photo was taken:\n                         </label>\n                         <input\n                              type='text'\n                              name='dateRecorded'\n                              className='form-control'\n                              onChange={onDateRecordedChange}\n                              value={dateRecorded}\n                         />\n                    </FormGroup>\n                    <SubmitButton />\n               </Form>\n          </Fragment>\n     );\n};\n\nAddPictureForm.propTypes = {\n     isAuth: PropTypes.bool,\n     setAlert: PropTypes.func.isRequired,\n     addNewPicture: PropTypes.func.isRequired,\n     // uploadPicture: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, {\n     setAlert,\n     addNewPicture,\n})(AddPictureForm);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst AddPictureModal = (props) => {\n     const closeBtn = (\n          <button className='close' onClick={props.toggle}>\n               &times;\n          </button>\n     );\n\n     return (\n          <div>\n               <Modal isOpen={props.isOpen} className='addModal'>\n                    <ModalHeader close={closeBtn}>\n                         Add a New Photo Memory\n                    </ModalHeader>\n                    <ModalBody>{props.children}</ModalBody>\n               </Modal>\n          </div>\n     );\n};\n\nexport default AddPictureModal;\n","import axios from 'axios';\nimport { setAlert } from './alertActions';\nimport {\n     GET_PROMPTS_SUCCESS,\n     GET_PROMPTS_FAIL,\n     ADD_PROMPT_SUCCESS,\n     ADD_PROMPT_FAIL,\n     DELETE_PROMPT_SUCCESS,\n     DELETE_PROMPT_FAIL,\n} from './types';\nimport { getAlbum } from './albumActions';\n\nexport const getPrompts = (album_id) => async (dispatch) => {\n     try {\n          const res = await axios.get(`/api/prompts/album/${album_id}`);\n          dispatch({\n               type: GET_PROMPTS_SUCCESS,\n               payload: res.data,\n          });\n     } catch (err) {\n          dispatch({\n               type: GET_PROMPTS_FAIL,\n               payload: {\n                    msg: err.response.status.text,\n                    status: err.response.status,\n               },\n          });\n     }\n};\n\nexport const addNewPrompt = (\n     album_id,\n     { prompt, response, uploadedBy, dateRecorded }\n) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     const body = JSON.stringify({\n          prompt,\n          response,\n          uploadedBy,\n          dateRecorded,\n     });\n     try {\n          const res = await axios.post(\n               `/api/prompts/${album_id}`,\n               body,\n               config\n          );\n\n          dispatch({\n               type: ADD_PROMPT_SUCCESS,\n               payload: res.data,\n          });\n          dispatch(getAlbum(album_id));\n          dispatch(getPrompts(album_id));\n     } catch (err) {\n          const errors = err.response;\n          if (errors) {\n               for (let i = 0; i < errors.length; i++) {\n                    dispatch(setAlert(errors[i].msg, 'danger'));\n               }\n          }\n          dispatch({\n               type: ADD_PROMPT_FAIL,\n          });\n     }\n};\n\nexport const deletePrompt = (prompt_id, album_id) => async (dispatch) => {\n     const config = {\n          headers: {\n               'Content-Type': 'application/json',\n               'Access-Control-Allow-Origin': '*',\n          },\n     };\n     if (\n          window.confirm(\n               'Are you sure you want to delete this memory? This action cannot be undone'\n          )\n     ) {\n          try {\n               const res = await axios.delete(\n                    `/api/prompts/${prompt_id}`,\n                    config\n               );\n               dispatch({\n                    type: DELETE_PROMPT_SUCCESS,\n                    payload: res.data,\n               });\n               dispatch(getAlbum(album_id));\n               dispatch(getPrompts(album_id));\n          } catch (err) {\n               const errors = err.response;\n               if (errors) {\n                    for (let i = 0; i < errors.length; i++) {\n                         dispatch(setAlert(errors[i].msg, 'danger'));\n                    }\n               }\n               dispatch({\n                    type: DELETE_PROMPT_FAIL,\n               });\n          }\n     }\n};\n","import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../../actions/alertActions';\nimport { addNewPrompt } from '../../../actions/promptActions';\nimport { Form, FormGroup } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport SubmitButton from '../../Buttons/SubmitBtn';\nimport AlertDiv from '../../Layout/AlertDiv';\n\nconst AddPromptForm = ({ setAlert, addNewPrompt, toggle }) => {\n     const [formData, setFormData] = useState({\n          prompt: '',\n          response: '',\n          uploadedBy: '',\n          dateRecorded: '',\n     });\n\n     const { prompt, response, uploadedBy, dateRecorded } = formData;\n\n     const onChange = (event) => {\n          setFormData({ ...formData, [event.target.name]: event.target.value });\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          let pathArray = window.location.pathname.split('/');\n          let albumId = pathArray[pathArray.length - 1];\n          if (\n               prompt === '' ||\n               response === '' ||\n               uploadedBy === '' ||\n               dateRecorded === ''\n          ) {\n               setAlert(\n                    'Please fill out all fields to thoroughly document your memory!',\n                    'danger'\n               );\n          } else {\n               try {\n                    addNewPrompt(albumId, {\n                         prompt,\n                         response,\n                         uploadedBy,\n                         dateRecorded,\n                    });\n                    setFormData({\n                         ...formData,\n                         prompt: '',\n                         response: '',\n                         uploadedBy: '',\n                         dateRecorded: '',\n                    });\n                    toggle();\n               } catch (err) {}\n          }\n     };\n\n     return (\n          <Fragment>\n               <AlertDiv />\n               <Form className='form' onSubmit={onSubmit}>\n                    <FormGroup>\n                         <label htmlFor='prompt'>Prompt</label>\n                         <input\n                              type='text'\n                              name='prompt'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={prompt}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='response'>Response</label>\n                         <textarea\n                              // type='textarea'\n                              name='response'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={response}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='uploadedBy'>Uploaded By:</label>\n                         <input\n                              type='text'\n                              name='uploadedBy'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={uploadedBy}\n                         />\n                    </FormGroup>\n                    <FormGroup>\n                         <label htmlFor='dateRecorded'>Date Recorded:</label>\n                         <input\n                              type='text'\n                              name='dateRecorded'\n                              className='form-control'\n                              onChange={(event) => onChange(event)}\n                              value={dateRecorded}\n                         />\n                    </FormGroup>\n\n                    <SubmitButton />\n               </Form>\n          </Fragment>\n     );\n};\n\nAddPromptForm.propTypes = {\n     isAuth: PropTypes.bool,\n     setAlert: PropTypes.func.isRequired,\n     addNewPrompt: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, addNewPrompt })(\n     AddPromptForm\n);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst AddPromptModal = (props) => {\n     const closeBtn = (\n          <button className='close' onClick={props.toggle}>\n               &times;\n          </button>\n     );\n\n     return (\n          <div>\n               <Modal isOpen={props.isOpen} className='addModal'>\n                    <ModalHeader close={closeBtn}>\n                         Add a New Memory Post\n                    </ModalHeader>\n                    <ModalBody>{props.children}</ModalBody>\n               </Modal>\n          </div>\n     );\n};\n\nexport default AddPromptModal;\n","import React from 'react';\nimport { Card, CardImg, CardBody, CardTitle } from 'reactstrap';\nimport './style.css';\nimport Moment from 'react-moment';\n\nconst MixedPostPicture = (props) => {\n     return (\n          <Card\n               onClick={props.onClick}\n               data-id={props.id}\n               type='picture'\n               className='mixedPostPicture'\n          >\n               <CardImg\n                    type='picture'\n                    src={props.image}\n                    data-id={props.id}\n                    alt={props.caption}\n                    className='image'\n               />\n               <CardBody className='overlay' data-id={props.id} type='picture'>\n                    <CardTitle>\n                         <div\n                              className='text'\n                              type='picture'\n                              data-id={props.id}\n                         >\n                              Uploaded by {props.uploadedBy} on{' '}\n                              <Moment\n                                   format='MM/DD/YYYY'\n                                   date={props.dateUploaded}\n                              />\n                         </div>\n                    </CardTitle>\n               </CardBody>\n          </Card>\n     );\n};\n\nexport default MixedPostPicture;\n","import React, { Fragment } from 'react';\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\nimport './style.css';\nimport Moment from 'react-moment';\n\nconst MixedPostPrompt = (props) => {\n     return (\n          <Card\n               onClick={props.onClick}\n               data-id={props.id}\n               type='prompt'\n               className='mixedPostPrompt'\n          >\n               <CardBody data-id={props.id} type='prompt'>\n                    <CardText data-id={props.id} type='prompt'>\n                         {props.prompt}. . .\n                         <br />\n                         {/* {props.response} */}\n                    </CardText>\n                    <div className='overlay' data-id={props.id} type='prompt'>\n                         <CardTitle\n                              className='text'\n                              data-id={props.id}\n                              type='prompt'\n                         >\n                              Uploaded{' '}\n                              {props.uploadedBy ? (\n                                   <Fragment>by {props.uploadedBy} </Fragment>\n                              ) : null}\n                              on{' '}\n                              <Moment\n                                   data-id={props.id}\n                                   format='MM/DD/YYYY'\n                                   date={props.dateUploaded}\n                              />\n                         </CardTitle>\n                    </div>\n               </CardBody>\n          </Card>\n     );\n};\n\nexport default MixedPostPrompt;\n","import React from 'react';\nimport {\n     Card,\n     CardImg,\n     CardText,\n     CardTitle,\n     CardSubtitle,\n     CardBody,\n} from 'reactstrap';\nimport './style.css';\nimport Moment from 'react-moment';\n\nconst CarouselPicture = (props) => {\n     // console.log(props);\n     return (\n          <Card className='carouselPicture' style={Card.CarouselPicture}>\n               <CardTitle>\n                    <Moment format='MM/DD/YYYY' date={props.dateUploaded} />\n               </CardTitle>\n               <CardSubtitle>Uploaded by {props.uploadedBy}</CardSubtitle>\n               <div className='memoryArea vertical-center'>\n                    <CardImg src={props.image} alt={props.caption} />\n               </div>\n               <span id='caption'>Caption:</span>\n               <CardBody>\n                    <CardText>{props.caption}</CardText>\n               </CardBody>\n          </Card>\n     );\n};\n\nexport default CarouselPicture;\n","import React from 'react';\nimport { Card, CardText, CardTitle, CardSubtitle, CardBody } from 'reactstrap';\nimport Moment from 'react-moment';\n\nimport './style.css';\n\nconst CarouselPrompt = (props) => {\n     return (\n          <Card className='carouselPrompt' style={Card.CarouselPicture}>\n               <CardTitle>\n                    <Moment format='MM/DD/YYYY' date={props.dateUploaded} />\n               </CardTitle>\n               <CardSubtitle>Uploaded by {props.uploadedBy}</CardSubtitle>\n               <div className='center'>\n                    <div className='memoryArea'>\n                         <span className='memoryText'>\n                              <span className='prompt'>{props.prompt}</span>\n                              <br />\n                              <span className='response'>{props.response}</span>\n                         </span>\n                    </div>\n                    <CardBody>\n                         <CardText>\n                              Memory recorded on{' '}\n                              <Moment\n                                   format='MM/DD/YYYY'\n                                   date={props.dateRecorded}\n                              />\n                         </CardText>\n                    </CardBody>\n               </div>\n          </Card>\n     );\n};\n\nexport default CarouselPrompt;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n     Container,\n     CarouselControl,\n     CarouselItem,\n     Carousel,\n     Form,\n     Button,\n     FormGroup,\n     Modal,\n     ModalFooter,\n     Row,\n     ModalHeader,\n} from 'reactstrap';\nimport MaterialIcon from 'material-icons-react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n\nimport AddPictureForm from '../components/Picture/AddPictureForm';\nimport AddPictureModal from '../components/Picture/AddPictureModal';\nimport AddPromptForm from '../components/Prompt/AddPromptForm';\nimport AddPromptModal from '../components/Prompt/AddPromptModal';\nimport ModalButton from '../components/Buttons/ModalButton';\nimport { getAlbum, albumAuth } from '../actions/albumActions';\nimport MixedPostPicture from '../components/Picture/MixedPostPicture';\nimport MixedPostPrompt from '../components/Prompt/MixedPostPrompt';\nimport PageTitle from '../components/Layout/PageTitle';\nimport CarouselPicture from '../components/Picture/CarouselPicture';\nimport CarouselPrompt from '../components/Prompt/CarouselPrompt';\nimport { deletePicture } from '../actions/pictureActions';\nimport { deletePrompt } from '../actions/promptActions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport AlertDiv from '../components/Layout/AlertDiv';\nimport { setAlert } from '../actions/alertActions';\n\nconst Album = ({\n     getAlbum,\n     album,\n     deletePicture,\n     deletePrompt,\n     albumLoading,\n     isAuth,\n     albumAuth,\n}) => {\n     let pathArray = window.location.pathname.split('/');\n     let albumId = pathArray[pathArray.length - 1];\n\n     useEffect(() => {\n          getAlbum(albumId);\n     }, [albumId, getAlbum]);\n\n     const [promptModal, setPromptModal] = useState(false);\n     const [photoModal, setPhotoModal] = useState(false);\n     const [carouselModal, setCarouselModal] = useState(false);\n\n     const photoToggle = () => {\n          setPhotoModal(!photoModal);\n     };\n\n     const promptToggle = () => {\n          setPromptModal(!promptModal);\n     };\n\n     const carouselToggle = () => {\n          setCarouselModal(!carouselModal);\n     };\n\n     const [activeIndex, setActiveIndex] = useState(0);\n     const [currentPost, setCurrentPost] = useState({\n          id: 0,\n          type: '',\n     });\n\n     const next = () => {\n          const nextIndex =\n               activeIndex === album.album.length - 1 ? 0 : activeIndex + 1;\n          setActiveIndex(nextIndex);\n     };\n\n     const previous = () => {\n          const nextIndex =\n               activeIndex === 0 ? album.album.length - 1 : activeIndex - 1;\n          setActiveIndex(nextIndex);\n     };\n\n     const onClick = (event, data) => {\n          setActiveIndex(data);\n          setCurrentPost({\n               id: event.target.getAttribute('data-id'),\n               type: event.target.getAttribute('type'),\n          });\n          carouselToggle();\n     };\n\n     const closeBtn = (\n          <button className='close' onClick={carouselToggle}>\n               &times;\n          </button>\n     );\n\n     const deleteClick = async (event) => {\n          event.preventDefault();\n          currentPost.type === 'picture'\n               ? deletePicture(currentPost.id, albumId)\n               : deletePrompt(currentPost.id, albumId);\n          carouselToggle();\n     };\n\n     const [password, setPassword] = useState('');\n     const onChange = (event) => {\n          setPassword(event.target.value);\n          console.log(password);\n     };\n\n     const onSubmit = async (event) => {\n          event.preventDefault();\n          try {\n               albumAuth({ albumId, password });\n          } catch (err) {\n               console.log(err);\n          }\n     };\n\n     const pageNotFound = () => {\n          setAlert('That album cannot be found', 'danger');\n          return <Redirect to='/pagenotfound' />;\n     };\n\n     // has the album loaded yet\n     return albumLoading ? (\n          <h1>Welcome</h1>\n     ) : // if the album has loaded, is it found in the DB\n     album.validAlbum ? (\n          <Fragment>\n               {/* if the album is found, load the title */}\n               <Container fluid={true}>\n                    <PageTitle>\n                         {album.albums[0].title} by{' '}\n                         {album.albums[0].user.firstName}{' '}\n                         {album.albums[0].user.lastName}\n                    </PageTitle>\n               </Container>\n               {/* if the album is found, are you the album owner or have you entered the password IF required*/}\n               {isAuth ||\n               !album.albums[0].passwordRequired ||\n               album.authorized ? (\n                    // load the buttons to add to album if authorized\n                    <>\n                         <Fragment>\n                              <AddPictureModal\n                                   toggle={photoToggle}\n                                   isOpen={photoModal}\n                              >\n                                   <AddPictureForm toggle={photoToggle} />\n                              </AddPictureModal>\n                              <AddPromptModal\n                                   toggle={promptToggle}\n                                   isOpen={promptModal}\n                              >\n                                   <AddPromptForm toggle={promptToggle} />\n                              </AddPromptModal>\n                              <div className='buttonContainer'>\n                                   <ModalButton\n                                        className='photoButton modalButton'\n                                        action={\n                                             <MaterialIcon\n                                                  icon='add_a_photo'\n                                                  color='#252525'\n                                                  size='medium'\n                                             />\n                                        }\n                                        onClick={photoToggle}\n                                   />\n                                   <br />\n                                   <br />\n                                   <br />\n                                   <ModalButton\n                                        className='promptButton modalButton'\n                                        action={\n                                             <MaterialIcon\n                                                  icon='create'\n                                                  color='#252525'\n                                                  size='medium'\n                                             />\n                                        }\n                                        onClick={promptToggle}\n                                   />\n                              </div>\n                         </Fragment>\n                         {album.album.length > 0 ? (\n                              <>\n                                   <Row>\n                                        {album.album.map((post, index) => (\n                                             <Fragment key={post._id}>\n                                                  {'image' in post ? (\n                                                       <Fragment>\n                                                            <MixedPostPicture\n                                                                 type='picture'\n                                                                 key={post._id}\n                                                                 id={post._id}\n                                                                 uploadedBy={\n                                                                      post.uploadedBy\n                                                                 }\n                                                                 image={\n                                                                      post.image\n                                                                 }\n                                                                 caption={\n                                                                      post.caption\n                                                                 }\n                                                                 dateRecorded={\n                                                                      post.dateRecorded\n                                                                 }\n                                                                 dateUploaded={\n                                                                      post.dateUploaded\n                                                                 }\n                                                                 onClick={(\n                                                                      event\n                                                                 ) => {\n                                                                      onClick(\n                                                                           event,\n                                                                           index\n                                                                      );\n                                                                 }}\n                                                                 index={index}\n                                                            />\n                                                       </Fragment>\n                                                  ) : (\n                                                       <MixedPostPrompt\n                                                            type='prompt'\n                                                            key={post._id}\n                                                            id={post._id}\n                                                            isAuth={isAuth}\n                                                            prompt={post.prompt}\n                                                            response={\n                                                                 post.response\n                                                            }\n                                                            dateRecorded={\n                                                                 post.dateRecorded\n                                                            }\n                                                            dateUploaded={\n                                                                 post.dateUploaded\n                                                            }\n                                                            uploadedBy={\n                                                                 post.uploadedBy\n                                                            }\n                                                            onClick={(\n                                                                 event\n                                                            ) => {\n                                                                 onClick(\n                                                                      event,\n                                                                      index\n                                                                 );\n                                                            }}\n                                                            index={index}\n                                                       ></MixedPostPrompt>\n                                                  )}\n                                             </Fragment>\n                                        ))}\n                                   </Row>\n                                   <Modal\n                                        toggle={carouselToggle}\n                                        isOpen={carouselModal}\n                                        centered={true}\n                                        size='lg'\n                                        close={closeBtn}\n                                   >\n                                        <ModalHeader className='caroModal justify-content-md-end'>\n                                             {closeBtn}\n                                        </ModalHeader>\n                                        <Carousel\n                                             activeIndex={activeIndex}\n                                             next={next}\n                                             previous={previous}\n                                        >\n                                             {album.album.map((post) => (\n                                                  <CarouselItem key={post._id}>\n                                                       {'image' in post ? (\n                                                            <CarouselPicture\n                                                                 image={\n                                                                      post.image\n                                                                 }\n                                                                 caption={\n                                                                      post.caption\n                                                                 }\n                                                                 dateRecorded={\n                                                                      post.dateRecorded\n                                                                 }\n                                                                 uploadedBy={\n                                                                      post.uploadedBy\n                                                                 }\n                                                                 dateUploaded={\n                                                                      post.dateUploaded\n                                                                 }\n                                                            />\n                                                       ) : (\n                                                            <CarouselPrompt\n                                                                 response={\n                                                                      post.response\n                                                                 }\n                                                                 prompt={\n                                                                      post.prompt\n                                                                 }\n                                                                 dateRecorded={\n                                                                      post.dateRecorded\n                                                                 }\n                                                                 uploadedBy={\n                                                                      post.uploadedBy\n                                                                 }\n                                                                 dateUploaded={\n                                                                      post.dateUploaded\n                                                                 }\n                                                            />\n                                                       )}\n\n                                                       {isAuth ? (\n                                                            <ModalFooter\n                                                                 className='mixedPost-footer center'\n                                                                 onClick={\n                                                                      deleteClick\n                                                                 }\n                                                                 data-id={\n                                                                      post._id\n                                                                 }\n                                                            >\n                                                                 <div>\n                                                                      {' '}\n                                                                      Delete\n                                                                      this post\n                                                                 </div>\n                                                            </ModalFooter>\n                                                       ) : null}\n                                                  </CarouselItem>\n                                             ))}\n\n                                             <CarouselControl\n                                                  direction='prev'\n                                                  directionText='Previous'\n                                                  onClickHandler={previous}\n                                             />\n                                             <CarouselControl\n                                                  direction='next'\n                                                  directionText='Next'\n                                                  onClickHandler={next}\n                                             />\n                                        </Carousel>\n                                   </Modal>\n                              </>\n                         ) : (\n                              <p>\n                                   No posts in this album yet! Use the buttons\n                                   below to begin storing your memories\n                              </p>\n                         )}\n                    </>\n               ) : (\n                    // if you are not authorized, give option to submit a password\n                    <Form className='form' onSubmit={onSubmit}>\n                         <AlertDiv />\n                         <FormGroup>\n                              <label htmlFor='inputPassword'>\n                                   Album Password\n                              </label>\n                              <input\n                                   type='password'\n                                   name='password'\n                                   className='form-control'\n                                   onChange={onChange}\n                                   value={password}\n                              />\n                         </FormGroup>\n                         <Button type='submit' value='albumAuth'>\n                              Submit\n                         </Button>\n                    </Form>\n               )}\n          </Fragment>\n     ) : (\n          pageNotFound\n     );\n};\n\nAlbum.propTypes = {\n     isAuth: PropTypes.bool,\n     albumLoading: PropTypes.bool.isRequired,\n     auth: PropTypes.object.isRequired,\n     album: PropTypes.object.isRequired,\n     getAlbum: PropTypes.func.isRequired,\n     deletePicture: PropTypes.func.isRequired,\n     deletePrompt: PropTypes.func.isRequired,\n     albumAuth: PropTypes.func.isRequired,\n};\n\nContainer.propTypes = {\n     fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     albumLoading: state.album.isLoading,\n     auth: state.auth,\n     album: state.album,\n});\n\nexport default connect(mapStateToProps, {\n     getAlbum,\n     deletePicture,\n     deletePrompt,\n     albumAuth,\n})(Album);\n","import React from 'react';\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { logout } from '../../../actions/authActions';\nimport { Redirect } from 'react-router-dom';\nimport logo from '../../../img/logo.png';\nimport './style.css';\n\nconst AppNavbar = ({ logout, auth }) => {\n     const logoutUser = () => {\n          logout();\n          return <Redirect to='/' />;\n     };\n\n     const loggedInLinks = (\n          <Nav>\n               <NavItem>\n                    <NavLink href='/dashboard'>Dashboard</NavLink>\n               </NavItem>\n               <NavItem>\n                    <NavLink href='/accountSettings'>Settings</NavLink>\n               </NavItem>\n               <NavItem>\n                    <NavLink href='/' onClick={logoutUser}>\n                         Logout\n                    </NavLink>\n               </NavItem>\n          </Nav>\n     );\n\n     const loggedOutLinks =\n          // <Nav>\n          //      <NavItem>\n          //           <NavLink href='/'>Homepage</NavLink>\n          //      </NavItem>\n          // </Nav>\n          null;\n     const loading = auth.isLoading;\n     return (\n          <div>\n               <Navbar className='mb-1 justify-content-md-end'>\n                    {loading || !auth.isAuthenticated\n                         ? loggedOutLinks\n                         : loggedInLinks}\n                    {!auth.isAuthenticated ? (\n                         <NavbarBrand href='/'>\n                              <img src={logo} alt='two elephants hugging' />\n                              <span>Elephant's Memory</span>\n                         </NavbarBrand>\n                    ) : (\n                         <NavbarBrand href='/dashboard'>\n                              <img src={logo} alt='two elephants hugging' />\n                              <span>Elephant's Memory</span>\n                         </NavbarBrand>\n                    )}\n               </Navbar>\n          </div>\n     );\n};\n\nAppNavbar.propTypes = {\n     logout: PropTypes.func.isRequired,\n     auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { logout })(AppNavbar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({\n     component: Component,\n     auth: { isAuthenticated, isLoading },\n     ...rest\n}) => (\n     <Route\n          {...rest}\n          render={(props) =>\n               !isAuthenticated && !isLoading ? (\n                    <Redirect to='/' />\n               ) : (\n                    <Component {...props} />\n               )\n          }\n     />\n);\n\nPrivateRoute.propTypes = {\n     auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Container } from 'reactstrap';\nimport MaterialIcon from 'material-icons-react';\nimport AlertDiv from '../components/Layout/AlertDiv';\n\nconst PageNotFound = ({ isAuth, isLoading }) => {\n     return (\n          <Container id='pageNotFound'>\n               <AlertDiv />\n               <h1>Whoops!</h1>\n               {/* <div className='center'> */}\n               <p>We can't seem to find the page you're looking for</p>\n               <p>\n                    <a href={isAuth ? '/dashboard' : '/'}>\n                         <MaterialIcon\n                              icon='arrow_forward'\n                              color='#252525'\n                              size='medium'\n                         />{' '}\n                         {isLoading || !isAuth ? (\n                              <span>Back to the welcome page</span>\n                         ) : (\n                              <span>Back to your dashboard</span>\n                         )}\n                    </a>\n               </p>\n          </Container>\n     );\n};\n\nPageNotFound.propTypes = {\n     isAuth: PropTypes.bool.isRequired,\n     isLoading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n     isAuth: state.auth.isAuthenticated,\n     isLoading: state.auth.isLoading,\n});\n\nexport default connect(mapStateToProps)(PageNotFound);\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import {\n     REGISTER_SUCCESS,\n     REGISTER_FAIL,\n     USER_LOADED,\n     AUTH_ERROR,\n     LOGIN_SUCCESS,\n     LOGIN_FAIL,\n     LOGOUT_SUCCESS,\n     CHANGE_PW_SUCCESS,\n     CHANGE_PW_FAIL,\n     DELETE_USER_SUCCESS,\n     DELETE_USER_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     // get token from local storage\n     token: localStorage.getItem('token'),\n     isAuthenticated: null,\n     isLoading: true,\n     user: null,\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case CHANGE_PW_SUCCESS:\n          case USER_LOADED:\n               return {\n                    ...state,\n                    isAuthenticated: true,\n                    isLoading: false,\n                    user: action.payload,\n               };\n          case LOGIN_SUCCESS:\n          case REGISTER_SUCCESS:\n               localStorage.setItem('token', action.payload.token);\n               return {\n                    ...state,\n                    ...action.payload,\n                    isAuthenticated: true,\n                    isLoading: true,\n               };\n          case DELETE_USER_FAIL:\n          case CHANGE_PW_FAIL:\n               return {\n                    ...state,\n                    isAuthenticated: true,\n                    isLoading: false,\n               };\n          case DELETE_USER_SUCCESS:\n          case LOGIN_FAIL:\n          case LOGOUT_SUCCESS:\n          case REGISTER_FAIL:\n          case AUTH_ERROR:\n               localStorage.removeItem('token');\n               return {\n                    ...state,\n                    token: null,\n                    isAuthenticated: false,\n                    isLoading: false,\n                    user: null,\n               };\n          default:\n               return state;\n     }\n}\n","import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState = [];\n\n// actions contain type and payload, which is the data\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case SET_ALERT:\n               // state is immutable so you need to include any state that is already there\n               // aka use the spread operator to copy and then add the new alert\n               return [...state, action.payload];\n          // payload will have .msg, .id, and an alert type\n          case REMOVE_ALERT:\n               // remove a specific alert by its ID\n               return state.filter((alert) => alert.id !== action.payload);\n          // payload in this case is the ID\n          default:\n               return state;\n     }\n}\n","import {\n     ADD_ALBUM_SUCCESS,\n     ADD_ALBUM_FAIL,\n     GET_ALBUMS_SUCCESS,\n     GET_ALBUMS_FAIL,\n     GET_ALBUM_SUCCESS,\n     GET_ALBUM_FAIL,\n     DELETE_ALBUM_SUCCESS,\n     DELETE_ALBUM_FAIL,\n     DELETE_PICTURE_SUCCESS,\n     DELETE_PICTURE_FAIL,\n     ALBUM_AUTH_SUCCESS,\n     ALBUM_AUTH_FAIL,\n     CHANGE_ALBUM_NAME_SUCCESS,\n     CHANGE_ALBUM_NAME_FAIL,\n     CHANGE_ALBUM_PW_SUCCESS,\n     CHANGE_ALBUM_PW_FAIL,\n     CHANGE_PW_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     albums: [],\n     album: [],\n     validAlbum: true,\n     isLoading: true,\n     authorized: null,\n     error: {},\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case ADD_ALBUM_SUCCESS:\n               return {\n                    validAlbum: true,\n                    ...state,\n                    ...action.payload,\n                    isLoading: false,\n               };\n          case GET_ALBUMS_SUCCESS:\n               return {\n                    ...state,\n                    albums: action.payload,\n                    isLoading: false,\n               };\n          case GET_ALBUM_SUCCESS:\n               return {\n                    ...state,\n                    album: action.payload.posts,\n                    albums: action.payload.data,\n                    isLoading: false,\n                    validAlbum: true,\n               };\n          case ALBUM_AUTH_SUCCESS:\n               return {\n                    ...state,\n                    isLoading: true,\n                    authorized: true,\n               };\n          case CHANGE_ALBUM_PW_SUCCESS:\n          case CHANGE_ALBUM_NAME_SUCCESS:\n          case DELETE_PICTURE_SUCCESS:\n          case DELETE_ALBUM_SUCCESS:\n               return {\n                    ...state,\n                    isLoading: false,\n               };\n          case CHANGE_ALBUM_PW_FAIL:\n          case CHANGE_PW_FAIL:\n          case CHANGE_ALBUM_NAME_FAIL:\n          case ALBUM_AUTH_FAIL:\n          case DELETE_PICTURE_FAIL:\n          case DELETE_ALBUM_FAIL:\n          case ADD_ALBUM_FAIL:\n          case GET_ALBUMS_FAIL:\n          case GET_ALBUM_FAIL:\n               return {\n                    ...state,\n                    error: action.payload,\n                    isLoading: false,\n                    validAlbum: false,\n               };\n\n          default:\n               return state;\n     }\n}\n","import {\n     GET_PICTURES_SUCCESS,\n     GET_PICTURES_FAIL,\n     ADD_PICTURE_SUCCESS,\n     ADD_PICTURE_FAIL,\n     DELETE_PICTURE_SUCCESS,\n     DELETE_PICTURE_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     pictures: [],\n     picture: {},\n     album: null,\n     isLoading: true,\n     error: {},\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case DELETE_PICTURE_SUCCESS:\n          case ADD_PICTURE_SUCCESS:\n          case GET_PICTURES_SUCCESS:\n               return {\n                    ...state,\n                    pictures: action.payload,\n                    album: action.payload.album,\n                    isLoading: false,\n               };\n          case DELETE_PICTURE_FAIL:\n          case ADD_PICTURE_FAIL:\n          case GET_PICTURES_FAIL:\n               return {\n                    ...state,\n                    error: action.payload,\n                    isLoading: false,\n               };\n          default:\n               return state;\n     }\n}\n","import {\n     GET_PROMPTS_SUCCESS,\n     GET_PROMPTS_FAIL,\n     ADD_PROMPT_SUCCESS,\n     ADD_PROMPT_FAIL,\n     DELETE_PROMPT_SUCCESS,\n     DELETE_PROMPT_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n     prompts: [],\n     prompt: {},\n     album: null,\n     isLoading: true,\n     error: {},\n};\n\nexport default function (state = initialState, action) {\n     switch (action.type) {\n          case DELETE_PROMPT_SUCCESS:\n          case ADD_PROMPT_SUCCESS:\n          case GET_PROMPTS_SUCCESS:\n               return {\n                    ...state,\n                    prompts: action.payload,\n                    album: action.payload.album,\n                    isLoading: false,\n               };\n          case DELETE_PROMPT_FAIL:\n          case ADD_PROMPT_FAIL:\n          case GET_PROMPTS_FAIL:\n               return {\n                    ...state,\n                    error: action.payload,\n                    isLoading: false,\n               };\n          default:\n               return state;\n     }\n}\n","// this is the Root reducer\nimport { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport alertReducer from './alertReducer';\nimport albumReducer from './albumReducer';\nimport pictureReducer from './pictureReducer';\nimport promptReducer from './promptReducer';\n\nexport default combineReducers({\n     alert: alertReducer,\n     album: albumReducer,\n     auth: authReducer,\n     picture: pictureReducer,\n     prompt: promptReducer,\n});\n","// entry point to our redux store\n// holds the whole state tree of your application\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/';\n\n// const initialState = {};\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\nconst store = createStore(\n     rootReducer,\n     /* preloadedState, */ composeEnhancers(\n          applyMiddleware(...middleware),\n          window.__REDUX_DEVTOOLS_EXTENSION__ &&\n               window.__REDUX_DEVTOOLS_EXTENSION__()\n     )\n);\n\n// store.dispatch\n\n// connectRouter(history)\n// manipulate router history in\nexport default store;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Welcome from './pages/Welcome';\nimport Dashboard from './pages/Dashboard';\nimport AccountSettings from './pages/AccountSettings';\nimport Album from './pages/Album';\nimport AppNavbar from './components/Layout/AppNavbar/index';\nimport PrivateRoute from './components/Auth/PrivateRoute';\nimport PageNotFound from './pages/PageNotFound';\nimport Wrapper from './components/Layout/Wrapper';\nimport { Helmet } from 'react-helmet';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// import global header\nimport setAuthToken from './utils/setAuthToken';\n\n// Connects React to Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { loadUser } from './actions/authActions';\n\nif (localStorage.token) {\n     setAuthToken(localStorage.token);\n}\n\nconst App = () => {\n     // this will be a constant loop without []\n     // basically like a componentDidMount with the []\n     // tells react that your effect doesn't depend on any values from props/state therefore it never needs to re-run\n     useEffect(() => {\n          store.dispatch(loadUser());\n     }, []);\n\n     return (\n          <Provider store={store}>\n               <AppNavbar />\n               <Wrapper>\n                    <Helmet>\n                         <style>{'body {background-color: #252525;}'}</style>\n                    </Helmet>\n\n                    <Router>\n                         <Switch>\n                              <Route exact path='/' component={Welcome} />\n                              <PrivateRoute\n                                   exact\n                                   path='/dashboard'\n                                   component={Dashboard}\n                              />\n                              <PrivateRoute\n                                   exact\n                                   path='/accountSettings'\n                                   component={AccountSettings}\n                              />\n                              <Route\n                                   exact\n                                   path='/album/:id'\n                                   component={Album}\n                              />\n                              <Route component={PageNotFound} />\n                         </Switch>\n                    </Router>\n               </Wrapper>\n          </Provider>\n     );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n     <React.StrictMode>\n          <App />\n     </React.StrictMode>,\n     document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.e6373936.png\";"],"sourceRoot":""}